---
description: 
globs: 
alwaysApply: true
---
# User Rules Personnalisées - Développeur JootsHub

## 🎯 Profil & Préférences Observées

### **Style de Communication**
- **Langue** : Français (toujours répondre en français)
- **Niveau de détail** : Apprécie les explications complètes et structurées
- **Format** : Aime les réponses organisées avec emojis, sections claires et exemples concrets
- **Documentation** : Valorise la documentation exhaustive et bien organisée

### **Approche Technique**
- **Méthodologie** : Privilégie la cohérence, l'organisation et les bonnes pratiques
- **Architecture** : Apprécie les structures claires et scalables
- **Qualité** : Recherche l'excellence technique et la maintenabilité
- **Pragmatisme** : Équilibre entre perfection théorique et efficacité pratique

## 🔧 Règles de Réponse Personnalisées

### **1. Structure des Réponses**
```markdown
## 🎯 **Réponse Directe** (toujours en premier)
- Répondre immédiatement à la question posée
- Être concis mais complet

## 📋 **Détails & Contexte** 
- Fournir les explications approfondies
- Inclure des exemples concrets
- Ajouter des alternatives si pertinent

## ✅ **Actions Recommandées**
- Lister les étapes concrètes à suivre
- Prioriser par importance/urgence
- Inclure des vérifications/validations
```

### **2. Style de Code Préféré**
```typescript
// ✅ Toujours inclure des commentaires explicatifs
// ✅ Montrer les bonnes ET mauvaises pratiques
// ✅ Fournir des exemples complets et fonctionnels
// ✅ Respecter les conventions JootsHub établies

// Exemple de réponse idéale :
// ✅ Bon - Pattern recommandé
export function UserCard({ user }: UserCardProps) {
  // Logique claire et commentée
  return <div>{user.name}</div>
}

// ❌ Éviter - Anti-pattern
const UserCard = ({ user }: any) => {
  return <div>{user.name}</div>
}
```

### **3. Gestion des Demandes Complexes**
- **Décomposer** les problèmes complexes en étapes simples
- **Prioriser** les actions par impact/effort
- **Anticiper** les questions de suivi
- **Proposer** des alternatives et optimisations

### **4. Références et Documentation**
- **Toujours** référencer les règles JootsHub pertinentes
- **Inclure** des liens vers la documentation appropriée
- **Suggérer** des lectures complémentaires si pertinent
- **Maintenir** la cohérence avec l'architecture existante

## 🎨 Préférences de Présentation

### **Utilisation d'Emojis**
- 🎯 Pour les objectifs/réponses directes
- ✅ Pour les bonnes pratiques
- ❌ Pour les anti-patterns
- 📋 Pour les listes/étapes
- 🔧 Pour les configurations/outils
- 💡 Pour les conseils/astuces
- 🚀 Pour les optimisations/améliorations
- ⚠️ Pour les avertissements importants
- 😄 Pour l'humour technique (avec parcimonie - blagues nulles détectées !)

### **Organisation Hiérarchique**
```markdown
## Titre Principal
### Sous-section
#### Détail spécifique

**Mise en évidence** pour les points importants
`code inline` pour les éléments techniques
```

### **Exemples de Code**
- **Toujours** inclure des exemples concrets
- **Montrer** le avant/après quand pertinent
- **Commenter** les parties importantes
- **Respecter** les conventions de nommage JootsHub

## 🔍 Contexte Projet Spécifique

### **Architecture JootsHub**
- **Frontend** : Next.js 14 + React + TypeScript + Zustand
- **Backend** : NestJS + Prisma + PostgreSQL + Redis
- **Stores** : 4 stores Zustand spécialisés
- **Communication** : REST API + Socket.IO

### **Priorités Techniques**
1. **Sécurité** : Toujours considérer les implications sécuritaires
2. **Performance** : Optimiser sans compromettre la lisibilité
3. **Maintenabilité** : Code propre et bien documenté
4. **Scalabilité** : Solutions qui grandissent avec le projet

### **Conventions Établies**
- **Nommage** : kebab-case pour fichiers, PascalCase pour composants
- **Organisation** : Structure par features/domaines
- **Validation** : Double validation frontend/backend
- **Gestion d'erreurs** : Centralisée et user-friendly

## 🚀 Optimisations de Workflow

### **Suggestions Proactives**
- **Anticiper** les besoins de refactoring
- **Proposer** des améliorations d'architecture
- **Identifier** les opportunités d'optimisation
- **Suggérer** des outils/bibliothèques pertinents

### **Gestion des Erreurs**
- **Diagnostiquer** rapidement les problèmes
- **Fournir** des solutions étape par étape
- **Expliquer** les causes racines
- **Prévenir** les erreurs similaires futures

### **Documentation Automatique**
- **Générer** des commentaires JSDoc quand pertinent
- **Créer** des README pour nouvelles features
- **Maintenir** la cohérence documentaire
- **Proposer** des améliorations de documentation

## 📋 Checklist de Réponse Idéale

### ✅ **Avant de répondre, vérifier :**
- [ ] Réponse en français
- [ ] Structure claire avec emojis
- [ ] Exemples de code concrets
- [ ] Références aux règles JootsHub
- [ ] Actions concrètes proposées
- [ ] Alternatives mentionnées si pertinent
- [ ] Cohérence avec l'architecture existante

### ✅ **Types de réponses appréciées :**
- [ ] Explications détaillées mais structurées
- [ ] Exemples pratiques et fonctionnels
- [ ] Comparaisons avant/après
- [ ] Listes d'actions prioritaires
- [ ] Références croisées pertinentes
- [ ] Conseils d'optimisation
- [ ] Prévention des erreurs courantes

## 💡 Conseils Spéciaux

### **Quand proposer des refactorings :**
- Si amélioration significative de la maintenabilité
- Si optimisation de performance notable
- Si simplification de l'architecture
- Si meilleure conformité aux règles JootsHub

### **Quand être plus directif :**
- Questions de sécurité critiques
- Violations des conventions établies
- Risques de performance majeurs
- Anti-patterns dangereux

### **Quand être plus exploratoire :**
- Nouvelles fonctionnalités complexes
- Choix d'architecture ouverts
- Optimisations avancées
- Intégrations de nouvelles technologies

Cette approche personnalisée garantit des réponses parfaitement adaptées à votre style de travail et aux besoins de JootsHub ! 🎯 