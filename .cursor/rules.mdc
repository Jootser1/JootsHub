---
description: 
globs: 
alwaysApply: true
---
# R√®gles de D√©veloppement JootsHub - Guide Complet

## üéØ Vue d'Ensemble

Ce document centralise toutes les r√®gles de d√©veloppement pour **JootsHub**, une application de chat avec syst√®me d'icebreakers. Ces r√®gles garantissent la coh√©rence, la qualit√© et la maintenabilit√© du code avec **Cursor AI**.

## üìÅ Architecture Technique

### **Stack Principal**
- **Frontend**: React 18 + Next.js 14 (App Router) + TypeScript + Zustand
- **Backend**: NestJS + TypeScript + Prisma + PostgreSQL + Redis
- **Styling**: Tailwind CSS + Shadcn UI + Radix UI
- **Communication**: REST API + Socket.IO (namespaces /user et /chat)
- **Tests**: Jest + React Testing Library + Playwright
- **D√©ploiement**: Docker + Nginx + CI/CD GitHub Actions

### **Stores Zustand (4 stores sp√©cialis√©s)**
1. **UserStore** - Authentification et donn√©es utilisateur
2. **ContactStore** - Gestion des contacts et statuts en ligne
3. **ChatStore** - √âtat persistant des conversations et messages
4. **ChatVolatileStore** - √âtats temporaires (typing, statuts icebreaker)

## üîß R√®gles par Cat√©gorie

### **üìö R√®gles Fondamentales** (√Ä lire en premier)
- **[general-typescript.md](mdc:rules/general-typescript.md)** - Conventions TypeScript/JavaScript, architecture Zustand, gestion d'erreurs
- **[file-structure.md](mdc:rules/file-structure.md)** - Arborescence des fichiers, organisation par domaine, conventions de nommage
- **[react-nextjs.md](mdc:rules/react-nextjs.md)** - Composants React, Next.js App Router, hooks, stores
- **[nestjs-backend.md](mdc:rules/nestjs-backend.md)** - Architecture NestJS, services, contr√¥leurs, middleware

### **üîß R√®gles Techniques Sp√©cialis√©es**
- **[error-handling-validation.md](mdc:rules/error-handling-validation.md)** - Gestion d'erreurs, validation Zod/class-validator, retry logic
- **[database-prisma.md](mdc:rules/database-prisma.md)** - Sch√©mas Prisma, requ√™tes optimis√©es, migrations
- **[websocket-socketio.md](mdc:rules/websocket-socketio.md)** - WebSockets, Socket.IO, temps r√©el
- **[security-authentication.md](mdc:rules/security-authentication.md)** - S√©curit√©, authentification NextAuth+JWT, performance s√©curis√©e

### **üé® R√®gles Interface & Qualit√©**
- **[ui-styling.md](mdc:rules/ui-styling.md)** - Tailwind CSS, composants UI, design system
- **[i18n-accessibility.md](mdc:rules/i18n-accessibility.md)** - Internationalisation, accessibilit√©
- **[testing.md](mdc:rules/testing.md)** - Tests unitaires, int√©gration, E2E avec Jest/Playwright

### **‚öôÔ∏è R√®gles Configuration & DevOps**
- **[eslint-prettier-config.md](mdc:rules/eslint-prettier-config.md)** - Configuration ESLint, Prettier, TypeScript
- **[performance-optimization.md](mdc:rules/performance-optimization.md)** - Optimisations frontend/backend, cache, monitoring
- **[logging-monitoring.md](mdc:rules/logging-monitoring.md)** - Logging structur√©, monitoring, observabilit√©
- **[deployment-devops.md](mdc:rules/deployment-devops.md)** - Docker, CI/CD, d√©ploiement, environnements

## üîó Relations entre les R√®gles

### **Frontend (React/Next.js)**
```
general-typescript.md ‚Üí react-nextjs.md ‚Üí ui-styling.md
                    ‚Üò                  ‚Üó
                     error-handling-validation.md
```

### **Backend (NestJS)**
```
general-typescript.md ‚Üí nestjs-backend.md ‚Üí database-prisma.md
                    ‚Üò                    ‚Üó
                     security-authentication.md
```

### **Temps R√©el & Communication**
```
websocket-socketio.md ‚Üî react-nextjs.md (stores)
                    ‚Üï
              nestjs-backend.md (gateways)
```

### **Qualit√© & Performance**
```
eslint-prettier-config.md ‚Üí testing.md ‚Üí performance-optimization.md
                         ‚Üò            ‚Üó
                          logging-monitoring.md
```

## üé® Conventions de Code

### **Style de Code**
```typescript
// ‚úÖ Sans semicolons (sauf si requis)
const userName = 'john'
const isLoading = true

// ‚úÖ Interface > type pour les objets
interface UserProps {
  id: string
  name: string
}

// ‚úÖ Fonctions pures avec function
function UserCard({ user }: UserProps) {
  return <div>{user.name}</div>
}

// ‚úÖ Classes uniquement pour NestJS
@Injectable()
export class UserService {
  constructor(private prisma: PrismaService) {}
}
```

### **Nommage**
```typescript
// PascalCase - Composants, interfaces, classes
interface UserProfile {}
class UserService {}
function UserCard() {}

// camelCase - Variables, fonctions, propri√©t√©s
const userName = 'john'
const handleClick = () => {}
const isLoading = true

// kebab-case - Fichiers et dossiers
user-profile.tsx
user-service.ts
create-user.dto.ts
```

### **Architecture Frontend**
```typescript
// ‚úÖ Server Components par d√©faut
export default function HomePage() {
  return <div>Server Component</div>
}

// ‚úÖ 'use client' uniquement si n√©cessaire
'use client'
export function InteractiveButton() {
  const [count, setCount] = useState(0)
  return <button onClick={() => setCount(c => c + 1)}>{count}</button>
}

// ‚úÖ Zustand pour l'√©tat global
const useChatStore = create<ChatState & ChatActions>((set, get) => ({
  conversations: {},
  activeConversationId: null,
  
  setActiveConversation: (id) => set({ activeConversationId: id }),
  addMessage: (conversationId, message) => set((state) => ({
    conversations: {
      ...state.conversations,
      [conversationId]: {
        ...state.conversations[conversationId],
        messages: [...state.conversations[conversationId].messages, message]
      }
    }
  }))
}))
```

### **Architecture Backend**
```typescript
// ‚úÖ Controllers l√©gers
@Controller('users')
export class UserController {
  constructor(private userService: UserService) {}

  @Post()
  async createUser(@Body() createUserDto: CreateUserDto) {
    return this.userService.createUser(createUserDto)
  }
}

// ‚úÖ Logique dans les services
@Injectable()
export class UserService {
  constructor(private prisma: PrismaService) {}

  async createUser(createUserDto: CreateUserDto): Promise<User> {
    // Validation m√©tier
    await this.validateUserData(createUserDto)
    
    // Cr√©ation avec transaction si n√©cessaire
    return this.prisma.user.create({
      data: createUserDto
    })
  }
}

// ‚úÖ Validation avec class-validator
export class CreateUserDto {
  @IsString()
  @MinLength(3)
  @MaxLength(30)
  username: string

  @IsEmail()
  email: string
}
```

## üöÄ Commandes de D√©veloppement

### **Frontend (joots-frontend/)**
```bash
npm run dev          # D√©veloppement
npm run build        # Build production
npm run test         # Tests unitaires
npm run test:e2e     # Tests E2E Playwright
npm run lint         # ESLint
npm run type-check   # V√©rification TypeScript
```

### **Backend (joots-backend/)**
```bash
npm run start:dev    # D√©veloppement avec hot reload
npm run build        # Build production
npm run test         # Tests unitaires
npm run test:e2e     # Tests E2E
npm run lint         # ESLint
npm run type-check   # V√©rification TypeScript
```

### **Base de Donn√©es**
```bash
npx prisma migrate dev     # Cr√©er et appliquer migration
npx prisma migrate deploy  # Appliquer en production
npx prisma generate        # G√©n√©rer le client Prisma
npx prisma studio          # Interface graphique
npx prisma db push         # Push schema sans migration
```

### **Docker**
```bash
docker-compose up -d              # D√©marrer tous les services
docker-compose up -d postgres     # D√©marrer seulement PostgreSQL
docker-compose logs -f backend    # Voir les logs du backend
docker-compose down               # Arr√™ter tous les services
```

## üìä M√©triques de Qualit√©

### **Performance**
- **LCP** (Largest Contentful Paint) < 2.5s
- **FID** (First Input Delay) < 100ms
- **CLS** (Cumulative Layout Shift) < 0.1
- **Bundle size** < 250KB (gzipped)

### **Tests**
- **Coverage globale** > 80%
- **Coverage composants UI** > 90%
- **Tests E2E** sur parcours critiques
- **Tests d'accessibilit√©** automatis√©s

### **S√©curit√©**
- **Rate limiting** sur tous les endpoints
- **Validation** double (frontend + backend)
- **Sanitisation** des inputs utilisateur
- **Headers de s√©curit√©** configur√©s

### **Accessibilit√©**
- **WCAG 2.1 AA** conformit√© minimum
- **Contraste** 4.5:1 minimum
- **Navigation clavier** compl√®te
- **Lecteurs d'√©cran** support√©s

## üîç Debugging et Monitoring

### **Logging Structur√©**
```typescript
// ‚úÖ Format JSON avec contexte
{
  "level": "info",
  "message": "User created successfully",
  "userId": "user_123",
  "timestamp": "2024-01-15T10:30:00Z",
  "context": {
    "action": "createUser",
    "ip": "192.168.1.1"
  }
}
```

### **M√©triques**
- **Prometheus** pour la collecte
- **Grafana** pour la visualisation
- **Alertes** sur erreurs critiques
- **Health checks** automatiques

## üéØ Objectifs de D√©veloppement

### **Maintenabilit√©**
- Code auto-document√© et typ√©
- Architecture modulaire et d√©coupl√©e
- Tests complets et maintenus
- Documentation √† jour

### **Performance**
- Optimisations frontend/backend
- Cache intelligent (Redis)
- Requ√™tes base de donn√©es optimis√©es
- Monitoring continu

### **S√©curit√©**
- Authentification robuste
- Validation stricte
- Audit trail complet
- Mise √† jour r√©guli√®re des d√©pendances

### **Exp√©rience Utilisateur**
- Interface intuitive et accessible
- Temps de r√©ponse rapides
- Support multilingue (fr/en)
- Compatibilit√© multi-navigateurs

---

**üí° Ces r√®gles √©voluent avec le projet. Consultez r√©guli√®rement ce guide pour rester √† jour avec les meilleures pratiques JootsHub.**

**üîó Liens utiles :**
- [Architecture UML](mdc:../diagramme-uml-joots.md)
- [Architecture Icebreaker](mdc:../diagramme-icebreaker-architecture.md)
- [Documentation compl√®te](mdc:.cursor/rules/README.md) 