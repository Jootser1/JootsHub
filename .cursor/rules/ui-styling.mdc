# R√®gles Interface Utilisateur & Styling - JootsHub

## üé® Philosophie du Design

### Principes Fondamentaux
- **Mobile-First** : Conception prioritaire pour mobile, puis desktop
- **Accessibility-First** : Accessibilit√© int√©gr√©e d√®s la conception
- **Consistency** : Coh√©rence visuelle et comportementale
- **Performance** : Optimisation des assets et animations
- **User-Centric** : Exp√©rience utilisateur fluide et intuitive

## üéØ Design System JootsHub

### Palette de Couleurs
```typescript
// tailwind.config.js - Configuration des couleurs JootsHub
module.exports = {
  theme: {
    extend: {
      colors: {
        // Couleurs principales
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',  // Couleur principale JootsHub
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
        },
        
        // Couleurs secondaires
        secondary: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          400: '#94a3b8',
          500: '#64748b',
          600: '#475569',
          700: '#334155',
          800: '#1e293b',
          900: '#0f172a',
        },
        
        // √âtats et feedback
        success: {
          50: '#f0fdf4',
          500: '#22c55e',
          600: '#16a34a',
        },
        warning: {
          50: '#fffbeb',
          500: '#f59e0b',
          600: '#d97706',
        },
        error: {
          50: '#fef2f2',
          500: '#ef4444',
          600: '#dc2626',
        },
        
        // Chat sp√©cifique
        chat: {
          bubble: {
            own: '#0ea5e9',      // Messages envoy√©s
            other: '#f1f5f9',    // Messages re√ßus
          },
          online: '#22c55e',     // Statut en ligne
          offline: '#94a3b8',    // Statut hors ligne
          typing: '#f59e0b',     // Indicateur de frappe
        }
      }
    }
  }
}
```

### Typographie
```typescript
// tailwind.config.js - Configuration typographique
module.exports = {
  theme: {
    extend: {
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
        mono: ['JetBrains Mono', 'monospace'],
      },
      fontSize: {
        // Hi√©rarchie typographique
        'xs': ['0.75rem', { lineHeight: '1rem' }],     // 12px
        'sm': ['0.875rem', { lineHeight: '1.25rem' }], // 14px
        'base': ['1rem', { lineHeight: '1.5rem' }],    // 16px
        'lg': ['1.125rem', { lineHeight: '1.75rem' }], // 18px
        'xl': ['1.25rem', { lineHeight: '1.75rem' }],  // 20px
        '2xl': ['1.5rem', { lineHeight: '2rem' }],     // 24px
        '3xl': ['1.875rem', { lineHeight: '2.25rem' }], // 30px
        
        // Tailles sp√©cifiques chat
        'message': ['0.875rem', { lineHeight: '1.25rem' }],
        'username': ['0.75rem', { lineHeight: '1rem' }],
        'timestamp': ['0.625rem', { lineHeight: '0.875rem' }],
      }
    }
  }
}
```

### Espacements et Layout
```typescript
// tailwind.config.js - Espacements personnalis√©s
module.exports = {
  theme: {
    extend: {
      spacing: {
        // Espacements sp√©cifiques JootsHub
        '18': '4.5rem',   // 72px
        '88': '22rem',    // 352px
        '128': '32rem',   // 512px
        
        // Chat layout
        'chat-header': '4rem',      // 64px
        'chat-input': '3.5rem',     // 56px
        'message-gap': '0.75rem',   // 12px
        'bubble-padding': '0.75rem', // 12px
      },
      
      maxWidth: {
        'chat': '48rem',        // 768px - Largeur max du chat
        'message': '20rem',     // 320px - Largeur max bulle
        'sidebar': '16rem',     // 256px - Largeur sidebar
      },
      
      minHeight: {
        'chat': 'calc(100vh - 8rem)', // Hauteur chat - header/footer
        'message-input': '2.5rem',     // 40px minimum
      }
    }
  }
}
```

## üß© Composants UI Standardis√©s

### Syst√®me de Composants
```typescript
// components/ui/Button.tsx
import { memo, forwardRef } from 'react'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/utils/cn'

const buttonVariants = cva(
  // Classes de base
  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background',
  {
    variants: {
      variant: {
        default: 'bg-primary-500 text-white hover:bg-primary-600',
        destructive: 'bg-error-500 text-white hover:bg-error-600',
        outline: 'border border-input hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary-100 text-secondary-900 hover:bg-secondary-200',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'underline-offset-4 hover:underline text-primary-500',
      },
      size: {
        default: 'h-10 py-2 px-4',
        sm: 'h-9 px-3 rounded-md',
        lg: 'h-11 px-8 rounded-md',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
)

interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

export const Button = memo(forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    return (
      <button
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
))

Button.displayName = 'Button'
```

### Composant Avatar Optimis√©
```typescript
// components/ui/Avatar.tsx
import { memo, useState } from 'react'
import Image from 'next/image'
import { cn } from '@/utils/cn'
import { generateJdenticon } from '@/utils/jdenticon'

interface AvatarProps {
  src?: string | null
  alt: string
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'
  className?: string
  isOnline?: boolean
  priority?: boolean
}

const sizeClasses = {
  xs: 'w-6 h-6',
  sm: 'w-8 h-8',
  md: 'w-10 h-10',
  lg: 'w-12 h-12',
  xl: 'w-16 h-16',
}

const sizePx = {
  xs: 24,
  sm: 32,
  md: 40,
  lg: 48,
  xl: 64,
}

export const Avatar = memo<AvatarProps>(({
  src,
  alt,
  size = 'md',
  className,
  isOnline,
  priority = false
}) => {
  const [hasError, setHasError] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  
  const sizeClass = sizeClasses[size]
  const sizePxValue = sizePx[size]
  
  // ‚úÖ G√©n√©ration d'avatar avec jdenticon (d√©j√† utilis√© dans JootsHub)
  const fallbackSrc = generateJdenticon(alt, sizePxValue)
  
  return (
    <div className={cn('relative flex-shrink-0', sizeClass, className)}>
      {/* Avatar principal */}
      <div className={cn('rounded-full overflow-hidden bg-secondary-100', sizeClass)}>
        {isLoading && (
          <div className={cn('animate-pulse bg-secondary-200', sizeClass)} />
        )}
        
        <Image
          src={hasError ? fallbackSrc : (src || fallbackSrc)}
          alt={alt}
          width={sizePxValue}
          height={sizePxValue}
          priority={priority}
          className={cn(
            'object-cover transition-opacity duration-200',
            isLoading ? 'opacity-0' : 'opacity-100'
          )}
          onLoad={() => setIsLoading(false)}
          onError={() => {
            setHasError(true)
            setIsLoading(false)
          }}
        />
      </div>
      
      {/* Indicateur de statut en ligne */}
      {isOnline !== undefined && (
        <div
          className={cn(
            'absolute -bottom-0.5 -right-0.5 rounded-full border-2 border-white',
            isOnline ? 'bg-chat-online' : 'bg-chat-offline',
            size === 'xs' ? 'w-2 h-2' : 'w-3 h-3'
          )}
          aria-label={isOnline ? 'En ligne' : 'Hors ligne'}
        />
      )}
    </div>
  )
})

Avatar.displayName = 'Avatar'
```

### Composant Message Bubble
```typescript
// components/chat/MessageBubble.tsx
import { memo } from 'react'
import { formatDistanceToNow } from 'date-fns'
import { fr } from 'date-fns/locale'
import { cn } from '@/utils/cn'
import { Avatar } from '@/components/ui/Avatar'
import { Message } from '@/types/chat'

interface MessageBubbleProps {
  message: Message
  isOwn: boolean
  showAvatar?: boolean
  showTimestamp?: boolean
  className?: string
}

export const MessageBubble = memo<MessageBubbleProps>(({
  message,
  isOwn,
  showAvatar = true,
  showTimestamp = true,
  className
}) => {
  const formattedTime = formatDistanceToNow(new Date(message.createdAt), {
    addSuffix: true,
    locale: fr
  })

  return (
    <div
      className={cn(
        'flex gap-3 max-w-[80%]',
        isOwn ? 'ml-auto flex-row-reverse' : 'mr-auto',
        className
      )}
    >
      {/* Avatar (seulement pour les messages des autres) */}
      {showAvatar && !isOwn && (
        <Avatar
          src={message.sender?.avatar}
          alt={message.sender?.username || 'Utilisateur'}
          size="sm"
          isOnline={message.sender?.isOnline}
        />
      )}
      
      {/* Contenu du message */}
      <div className={cn('flex flex-col', isOwn ? 'items-end' : 'items-start')}>
        {/* Nom d'utilisateur (seulement pour les messages des autres) */}
        {!isOwn && (
          <span className="text-username text-secondary-600 mb-1 px-1">
            {message.sender?.username}
          </span>
        )}
        
        {/* Bulle de message */}
        <div
          className={cn(
            'px-bubble-padding py-2 rounded-2xl max-w-message break-words',
            isOwn
              ? 'bg-chat-bubble-own text-white rounded-br-md'
              : 'bg-chat-bubble-other text-secondary-900 rounded-bl-md'
          )}
        >
          {/* Contenu selon le type */}
          {message.messageType === 'TEXT' ? (
            <p className="text-message whitespace-pre-wrap">{message.content}</p>
          ) : (
            <MessageAnswer message={message} />
          )}
        </div>
        
        {/* Timestamp */}
        {showTimestamp && (
          <span className="text-timestamp text-secondary-400 mt-1 px-1">
            {formattedTime}
          </span>
        )}
      </div>
    </div>
  )
})

MessageBubble.displayName = 'MessageBubble'
```

## üì± Responsive Design

### Breakpoints Standardis√©s
```typescript
// tailwind.config.js - Breakpoints JootsHub
module.exports = {
  theme: {
    screens: {
      'xs': '475px',    // Petits mobiles
      'sm': '640px',    // Mobiles
      'md': '768px',    // Tablettes
      'lg': '1024px',   // Desktop
      'xl': '1280px',   // Large desktop
      '2xl': '1536px',  // Extra large
      
      // Breakpoints sp√©cifiques
      'mobile': { 'max': '767px' },
      'tablet': { 'min': '768px', 'max': '1023px' },
      'desktop': { 'min': '1024px' },
    }
  }
}
```

### Layout Responsive
```typescript
// components/layout/ChatLayout.tsx
import { memo, ReactNode } from 'react'
import { cn } from '@/utils/cn'

interface ChatLayoutProps {
  sidebar: ReactNode
  chat: ReactNode
  className?: string
}

export const ChatLayout = memo<ChatLayoutProps>(({
  sidebar,
  chat,
  className
}) => {
  return (
    <div className={cn('flex h-screen bg-secondary-50', className)}>
      {/* Sidebar - Cach√©e sur mobile, visible sur desktop */}
      <aside className={cn(
        'hidden md:flex md:flex-col',
        'w-sidebar bg-white border-r border-secondary-200',
        'flex-shrink-0'
      )}>
        {sidebar}
      </aside>
      
      {/* Zone de chat principale */}
      <main className="flex-1 flex flex-col min-w-0">
        {chat}
      </main>
    </div>
  )
})

ChatLayout.displayName = 'ChatLayout'
```

### Composants Adaptatifs
```typescript
// components/ui/MobileDrawer.tsx
import { memo, ReactNode } from 'react'
import { Dialog, DialogContent, DialogTrigger } from '@/components/ui/Dialog'
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/Sheet'
import { useMediaQuery } from '@/hooks/useMediaQuery'

interface ResponsiveModalProps {
  trigger: ReactNode
  children: ReactNode
  title?: string
}

export const ResponsiveModal = memo<ResponsiveModalProps>(({
  trigger,
  children,
  title
}) => {
  const isMobile = useMediaQuery('(max-width: 767px)')
  
  if (isMobile) {
    // Sheet pour mobile (slide from bottom)
    return (
      <Sheet>
        <SheetTrigger asChild>{trigger}</SheetTrigger>
        <SheetContent side="bottom" className="h-[90vh]">
          {children}
        </SheetContent>
      </Sheet>
    )
  }
  
  // Dialog pour desktop
  return (
    <Dialog>
      <DialogTrigger asChild>{trigger}</DialogTrigger>
      <DialogContent className="max-w-md">
        {children}
      </DialogContent>
    </Dialog>
  )
})

ResponsiveModal.displayName = 'ResponsiveModal'
```

## ‚ôø Accessibilit√©

### R√®gles d'Accessibilit√©
```typescript
// ‚úÖ BON - Composant accessible
export const AccessibleButton = memo<ButtonProps>(({
  children,
  onClick,
  disabled,
  'aria-label': ariaLabel,
  ...props
}) => {
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      aria-label={ariaLabel}
      aria-disabled={disabled}
      className={cn(
        'focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2',
        'transition-all duration-200',
        disabled && 'opacity-50 cursor-not-allowed'
      )}
      {...props}
    >
      {children}
    </button>
  )
})

// ‚ùå MAUVAIS - Pas accessible
export function BadButton({ children, onClick }) {
  return (
    <div onClick={onClick} className="cursor-pointer">
      {children}
    </div>
  )
}
```

### Navigation Clavier
```typescript
// hooks/useKeyboardNavigation.ts
import { useCallback, useEffect } from 'react'

export const useKeyboardNavigation = (
  items: string[],
  onSelect: (item: string) => void,
  isOpen: boolean
) => {
  const [selectedIndex, setSelectedIndex] = useState(0)

  const handleKeyDown = useCallback((e: KeyboardEvent) => {
    if (!isOpen) return

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault()
        setSelectedIndex(prev => 
          prev < items.length - 1 ? prev + 1 : 0
        )
        break
        
      case 'ArrowUp':
        e.preventDefault()
        setSelectedIndex(prev => 
          prev > 0 ? prev - 1 : items.length - 1
        )
        break
        
      case 'Enter':
        e.preventDefault()
        onSelect(items[selectedIndex])
        break
        
      case 'Escape':
        e.preventDefault()
        // Fermer le menu
        break
    }
  }, [isOpen, items, selectedIndex, onSelect])

  useEffect(() => {
    document.addEventListener('keydown', handleKeyDown)
    return () => document.removeEventListener('keydown', handleKeyDown)
  }, [handleKeyDown])

  return { selectedIndex, setSelectedIndex }
}
```

### Contraste et Lisibilit√©
```typescript
// utils/accessibility.ts
export const checkColorContrast = (foreground: string, background: string): boolean => {
  // Calcul du ratio de contraste WCAG
  const ratio = calculateContrastRatio(foreground, background)
  return ratio >= 4.5 // AA standard
}

export const getAccessibleTextColor = (backgroundColor: string): string => {
  const luminance = calculateLuminance(backgroundColor)
  return luminance > 0.5 ? '#000000' : '#ffffff'
}

// Validation des couleurs JootsHub
export const ACCESSIBLE_COLORS = {
  primary: {
    text: '#ffffff',
    background: '#0ea5e9',
    contrast: 4.8 // ‚úÖ AA compliant
  },
  secondary: {
    text: '#1e293b',
    background: '#f1f5f9',
    contrast: 12.6 // ‚úÖ AAA compliant
  }
} as const
```

## üé≠ Th√®mes et Mode Sombre

### Configuration des Th√®mes
```typescript
// contexts/ThemeContext.tsx
import { createContext, useContext, useEffect, useState } from 'react'

type Theme = 'light' | 'dark' | 'system'

interface ThemeContextType {
  theme: Theme
  setTheme: (theme: Theme) => void
  resolvedTheme: 'light' | 'dark'
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined)

export const ThemeProvider = ({ children }: { children: React.ReactNode }) => {
  const [theme, setTheme] = useState<Theme>('system')
  const [resolvedTheme, setResolvedTheme] = useState<'light' | 'dark'>('light')

  useEffect(() => {
    const root = window.document.documentElement
    
    if (theme === 'system') {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'light'
      setResolvedTheme(systemTheme)
      root.classList.toggle('dark', systemTheme === 'dark')
    } else {
      setResolvedTheme(theme)
      root.classList.toggle('dark', theme === 'dark')
    }
  }, [theme])

  return (
    <ThemeContext.Provider value={{ theme, setTheme, resolvedTheme }}>
      {children}
    </ThemeContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeContext)
  if (!context) {
    throw new Error('useTheme must be used within ThemeProvider')
  }
  return context
}
```

### Variables CSS pour les Th√®mes
```css
/* styles/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Mode clair */
    --background: 248 250 252;
    --foreground: 15 23 42;
    --card: 255 255 255;
    --card-foreground: 15 23 42;
    --primary: 14 165 233;
    --primary-foreground: 255 255 255;
    --secondary: 241 245 249;
    --secondary-foreground: 30 41 59;
    --muted: 241 245 249;
    --muted-foreground: 100 116 139;
    --accent: 241 245 249;
    --accent-foreground: 15 23 42;
    --destructive: 239 68 68;
    --destructive-foreground: 255 255 255;
    --border: 226 232 240;
    --input: 226 232 240;
    --ring: 14 165 233;
    --radius: 0.5rem;
    
    /* Chat sp√©cifique */
    --chat-bubble-own: 14 165 233;
    --chat-bubble-other: 241 245 249;
    --chat-online: 34 197 94;
    --chat-offline: 148 163 184;
  }

  .dark {
    /* Mode sombre */
    --background: 15 23 42;
    --foreground: 248 250 252;
    --card: 30 41 59;
    --card-foreground: 248 250 252;
    --primary: 56 189 248;
    --primary-foreground: 15 23 42;
    --secondary: 51 65 85;
    --secondary-foreground: 248 250 252;
    --muted: 51 65 85;
    --muted-foreground: 148 163 184;
    --accent: 51 65 85;
    --accent-foreground: 248 250 252;
    --destructive: 220 38 38;
    --destructive-foreground: 248 250 252;
    --border: 51 65 85;
    --input: 51 65 85;
    --ring: 56 189 248;
    
    /* Chat mode sombre */
    --chat-bubble-own: 56 189 248;
    --chat-bubble-other: 51 65 85;
    --chat-online: 34 197 94;
    --chat-offline: 100 116 139;
  }
}
```

## ‚ú® Animations et Transitions

### Animations Standardis√©es
```typescript
// tailwind.config.js - Animations personnalis√©es
module.exports = {
  theme: {
    extend: {
      animation: {
        // Animations de base
        'fade-in': 'fadeIn 0.2s ease-in-out',
        'fade-out': 'fadeOut 0.2s ease-in-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'slide-down': 'slideDown 0.3s ease-out',
        'scale-in': 'scaleIn 0.2s ease-out',
        
        // Animations chat sp√©cifiques
        'message-appear': 'messageAppear 0.3s ease-out',
        'typing-dots': 'typingDots 1.4s infinite',
        'online-pulse': 'onlinePulse 2s infinite',
        
        // Animations de chargement
        'skeleton': 'skeleton 1.5s ease-in-out infinite alternate',
      },
      
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        messageAppear: {
          '0%': { transform: 'translateY(20px) scale(0.95)', opacity: '0' },
          '100%': { transform: 'translateY(0) scale(1)', opacity: '1' },
        },
        typingDots: {
          '0%, 60%, 100%': { transform: 'translateY(0)' },
          '30%': { transform: 'translateY(-10px)' },
        },
        onlinePulse: {
          '0%, 100%': { opacity: '1' },
          '50%': { opacity: '0.5' },
        },
        skeleton: {
          '0%': { backgroundColor: 'hsl(var(--muted))' },
          '100%': { backgroundColor: 'hsl(var(--muted) / 0.5)' },
        },
      },
    }
  }
}
```

### Composant d'Animation
```typescript
// components/ui/AnimatedMessage.tsx
import { memo, useEffect, useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { MessageBubble } from './MessageBubble'
import { Message } from '@/types/chat'

interface AnimatedMessageProps {
  message: Message
  isOwn: boolean
  delay?: number
}

export const AnimatedMessage = memo<AnimatedMessageProps>(({
  message,
  isOwn,
  delay = 0
}) => {
  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    const timer = setTimeout(() => setIsVisible(true), delay)
    return () => clearTimeout(timer)
  }, [delay])

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ 
            opacity: 0, 
            y: 20, 
            scale: 0.95 
          }}
          animate={{ 
            opacity: 1, 
            y: 0, 
            scale: 1 
          }}
          exit={{ 
            opacity: 0, 
            y: -20, 
            scale: 0.95 
          }}
          transition={{
            duration: 0.3,
            ease: 'easeOut'
          }}
          layout
        >
          <MessageBubble message={message} isOwn={isOwn} />
        </motion.div>
      )}
    </AnimatePresence>
  )
})

AnimatedMessage.displayName = 'AnimatedMessage'
```

### Indicateur de Frappe Anim√©
```typescript
// components/chat/TypingIndicator.tsx
import { memo } from 'react'
import { motion } from 'framer-motion'
import { Avatar } from '@/components/ui/Avatar'

interface TypingIndicatorProps {
  username: string
  avatar?: string
}

export const TypingIndicator = memo<TypingIndicatorProps>(({
  username,
  avatar
}) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -10 }}
      className="flex items-center gap-3 px-4 py-2"
    >
      <Avatar src={avatar} alt={username} size="sm" />
      
      <div className="flex items-center gap-2">
        <span className="text-sm text-secondary-600">{username} √©crit</span>
        
        {/* Dots anim√©s */}
        <div className="flex gap-1">
          {[0, 1, 2].map((i) => (
            <motion.div
              key={i}
              className="w-2 h-2 bg-chat-typing rounded-full"
              animate={{
                y: [0, -4, 0],
              }}
              transition={{
                duration: 0.6,
                repeat: Infinity,
                delay: i * 0.2,
              }}
            />
          ))}
        </div>
      </div>
    </motion.div>
  )
})

TypingIndicator.displayName = 'TypingIndicator'
```

## üìã Checklist UI/UX

### ‚úÖ **Design System :**
- [ ] Palette de couleurs coh√©rente et accessible
- [ ] Typographie hi√©rarchis√©e (Inter + JetBrains Mono)
- [ ] Espacements standardis√©s (4px grid)
- [ ] Composants r√©utilisables avec variants
- [ ] Tokens de design document√©s

### ‚úÖ **Responsive Design :**
- [ ] Mobile-first approach
- [ ] Breakpoints standardis√©s
- [ ] Layout adaptatif (sidebar cach√©e sur mobile)
- [ ] Touch-friendly (44px minimum touch targets)
- [ ] Orientation landscape/portrait g√©r√©e

### ‚úÖ **Accessibilit√© :**
- [ ] Contraste WCAG AA (4.5:1 minimum)
- [ ] Navigation clavier compl√®te
- [ ] ARIA labels et roles appropri√©s
- [ ] Focus visible et logique
- [ ] Screen reader friendly

### ‚úÖ **Performance :**
- [ ] Images optimis√©es (Next.js Image)
- [ ] Lazy loading des composants
- [ ] Animations 60fps (transform/opacity)
- [ ] Bundle CSS optimis√©
- [ ] Critical CSS inline

### ‚úÖ **Th√®mes :**
- [ ] Mode clair/sombre
- [ ] Respect des pr√©f√©rences syst√®me
- [ ] Transition fluide entre th√®mes
- [ ] Variables CSS coh√©rentes
- [ ] Persistance du choix utilisateur

### ‚úÖ **Chat UX :**
- [ ] Bulles de message distinctes (envoy√©/re√ßu)
- [ ] Indicateur de frappe anim√©
- [ ] Statuts en ligne visuels
- [ ] Timestamps relatifs
- [ ] Scroll automatique aux nouveaux messages

Cette architecture UI garantit une exp√©rience utilisateur exceptionnelle pour JootsHub ! üé® 