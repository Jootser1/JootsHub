# 📋 Règles de Développement JootsHub

Ce dossier contient toutes les règles et conventions de développement pour le projet JootsHub.

## 🎯 Organisation et Priorités

### 📚 **Règles Fondamentales** (À lire en premier)
- **[general-typescript.md](./general-typescript.md)** - Conventions TypeScript/JavaScript, architecture Zustand, gestion d'erreurs
- **[file-structure.md](./file-structure.md)** - Arborescence des fichiers, organisation par domaine, conventions de nommage
- **[react-nextjs.md](./react-nextjs.md)** - Composants React, Next.js App Router, hooks, stores
- **[nestjs-backend.md](./nestjs-backend.md)** - Architecture NestJS, services, contrôleurs, middleware

### 🔧 **Règles Techniques Spécialisées**
- **[error-handling-validation.md](./error-handling-validation.md)** - Gestion d'erreurs, validation Zod/class-validator, retry logic
- **[database-prisma.md](./database-prisma.md)** - Schémas Prisma, requêtes optimisées, migrations
- **[websocket-socketio.md](./websocket-socketio.md)** - WebSockets, Socket.IO, temps réel
- **[security-authentication.md](./security-authentication.md)** - Sécurité, authentification NextAuth+JWT, performance sécurisée

### 🎨 **Règles Interface & Qualité**
- **[ui-styling.md](./ui-styling.md)** - Tailwind CSS, composants UI, design system
- **[i18n-accessibility.md](./i18n-accessibility.md)** - Internationalisation, accessibilité
- **[testing.md](./testing.md)** - Tests unitaires, intégration, E2E avec Jest/Playwright

### ⚙️ **Règles Configuration & DevOps**
- **[eslint-prettier-config.md](./eslint-prettier-config.md)** - Configuration ESLint, Prettier, TypeScript
- **[performance-optimization.md](./performance-optimization.md)** - Optimisations frontend/backend, cache, monitoring
- **[logging-monitoring.md](./logging-monitoring.md)** - Logging structuré, monitoring, observabilité
- **[deployment-devops.md](./deployment-devops.md)** - Docker, CI/CD, déploiement, environnements

## 🔗 Relations entre les Règles

### **Frontend (React/Next.js)**
```
general-typescript.md → react-nextjs.md → ui-styling.md
                    ↘                  ↗
                     error-handling-validation.md
```

### **Backend (NestJS)**
```
general-typescript.md → nestjs-backend.md → database-prisma.md
                    ↘                    ↗
                     security-authentication.md
```

### **Temps Réel & Communication**
```
websocket-socketio.md ↔ react-nextjs.md (stores)
                    ↕
              nestjs-backend.md (gateways)
```

### **Qualité & Performance**
```
eslint-prettier-config.md → testing.md → performance-optimization.md
                         ↘            ↗
                          logging-monitoring.md
```

## 🚀 Guide de Démarrage Rapide

### Pour un **nouveau développeur** :
1. 📖 Lire `general-typescript.md` (conventions de base)
2. 🎯 Selon votre rôle :
   - **Frontend** : `react-nextjs.md` → `ui-styling.md`
   - **Backend** : `nestjs-backend.md` → `database-prisma.md`
   - **Fullstack** : Les deux parcours
3. 🔐 Lire `security-authentication.md` (obligatoire pour tous)
4. 🧪 Configurer l'environnement avec `eslint-prettier-config.md`

### Pour une **nouvelle fonctionnalité** :
1. 🏗️ Architecture : `general-typescript.md` + spécifique (React/NestJS)
2. 🔒 Sécurité : `security-authentication.md` + `error-handling-validation.md`
3. 🎨 Interface : `ui-styling.md` + `i18n-accessibility.md`
4. 🧪 Tests : `testing.md`
5. 📊 Performance : `performance-optimization.md`

### Pour un **bug critique** :
1. 🚨 `error-handling-validation.md` (gestion d'erreurs)
2. 📝 `logging-monitoring.md` (debugging)
3. 🔐 `security-authentication.md` (si lié à la sécurité)

## 📋 Checklist de Conformité

Avant chaque PR, vérifier :

### ✅ **Code Quality**
- [ ] Conventions TypeScript respectées (`general-typescript.md`)
- [ ] Gestion d'erreurs appropriée (`error-handling-validation.md`)
- [ ] Tests unitaires écrits (`testing.md`)
- [ ] ESLint/Prettier configurés (`eslint-prettier-config.md`)

### ✅ **Sécurité**
- [ ] Validation des entrées (`security-authentication.md`)
- [ ] Authentification/autorisation (`security-authentication.md`)
- [ ] Pas de données sensibles exposées

### ✅ **Performance**
- [ ] Optimisations appliquées (`performance-optimization.md`)
- [ ] Requêtes DB optimisées (`database-prisma.md`)
- [ ] Cache approprié (Redis/mémoire)

### ✅ **UX/UI**
- [ ] Design system respecté (`ui-styling.md`)
- [ ] Accessibilité vérifiée (`i18n-accessibility.md`)
- [ ] Responsive design

### ✅ **Documentation**
- [ ] Code documenté (JSDoc pour fonctions complexes)
- [ ] README mis à jour si nécessaire
- [ ] Logs appropriés (`logging-monitoring.md`)

## 🔄 Mise à Jour des Règles

Ces règles évoluent avec le projet. Pour proposer des modifications :

1. 🗣️ **Discussion** : Ouvrir une issue pour discuter du changement
2. 📝 **Documentation** : Mettre à jour le fichier concerné
3. 🔍 **Review** : Faire valider par l'équipe
4. 📢 **Communication** : Informer l'équipe des changements

## 📞 Support

- **Questions générales** : Voir le fichier de règle approprié
- **Clarifications** : Ouvrir une issue GitHub
- **Urgences** : Contacter l'équipe technique

---

**💡 Conseil** : Gardez ce README ouvert pendant le développement pour référence rapide ! 