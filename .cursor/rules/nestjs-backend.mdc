# Règles NestJS & Backend

## Architecture Modulaire

### Principes Fondamentaux
- Utiliser une architecture modulaire
- Encapsuler l'API en modules par domaine métier
- Appliquer les principes SOLID
- Séparer les responsabilités (controllers, services, repositories)

### Structure des Modules
```typescript
// Structure recommandée pour un module
src/
  domain/
    domain.module.ts
    domain.controller.ts
    domain.service.ts
    dto/
      create-domain.dto.ts
      update-domain.dto.ts
    entities/
      domain.entity.ts
    types/
      domain.types.ts
```

## Classes et Décorateurs

### Classes Autorisées
Dans le contexte NestJS, les classes sont **obligatoires** pour :
- Controllers (`@Controller()`)
- Services (`@Injectable()`)
- Modules (`@Module()`)
- Guards (`@Injectable()`)
- Interceptors (`@Injectable()`)
- Middlewares
- Entities (Prisma/TypeORM)

```typescript
// ✅ Bon - Service NestJS
@Injectable()
export class UserService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly redis: RedisService
  ) {}

  async createUser(createUserDto: CreateUserDto): Promise<User> {
    // ✅ Toujours utiliser les exceptions NestJS (jamais throw new Error())
    if (!createUserDto.email) {
      throw new BadRequestException('Email requis')
    }

    const existingUser = await this.findByEmail(createUserDto.email)
    if (existingUser) {
      throw new ConflictException('Utilisateur déjà existant')
    }

    try {
      return await this.prisma.user.create({
        data: createUserDto
      })
    } catch (error) {
      // ✅ Transformer les erreurs Prisma en exceptions NestJS
      if (error.code === 'P2002') {
        throw new ConflictException('Contrainte d\'unicité violée')
      }
      throw new InternalServerErrorException('Erreur lors de la création')
    }
  }

  private async findByEmail(email: string): Promise<User | null> {
    return this.prisma.user.findUnique({ where: { email } })
  }
}
```

## Controllers

### Structure et Responsabilités
- Un controller par route principale
- Controllers légers (délégation vers services)
- Validation des entrées avec class-validator
- Gestion appropriée des codes de statut HTTP

```typescript
@Controller('users')
@UseGuards(JwtAuthGuard)
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Post()
  @HttpCode(HttpStatus.CREATED)
  async createUser(@Body() createUserDto: CreateUserDto): Promise<User> {
    return this.usersService.createUser(createUserDto)
  }

  @Get(':id')
  async getUserById(@Param('id', ParseUUIDPipe) id: string): Promise<User> {
    const user = await this.usersService.findById(id)
    if (!user) {
      throw new NotFoundException('Utilisateur non trouvé')
    }
    return user
  }

  @Patch(':id')
  async updateUser(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() updateUserDto: UpdateUserDto
  ): Promise<User> {
    return this.usersService.updateUser(id, updateUserDto)
  }

  @Delete(':id')
  @HttpCode(HttpStatus.NO_CONTENT)
  async deleteUser(@Param('id', ParseUUIDPipe) id: string): Promise<void> {
    await this.usersService.deleteUser(id)
  }

  // Méthode de test pour vérification du bon fonctionnement
  @Get('admin/test')
  async adminTest(): Promise<{ status: string }> {
    return { status: 'OK' }
  }
}
```

## DTOs et Validation

### Data Transfer Objects
- Utiliser class-validator pour la validation
- Séparer les DTOs d'entrée et de sortie
- Déclarer des types simples pour les réponses

```typescript
// dto/create-user.dto.ts
import { IsEmail, IsString, MinLength, IsOptional } from 'class-validator'

export class CreateUserDto {
  @IsEmail({}, { message: 'Email invalide' })
  email: string

  @IsString({ message: 'Le prénom doit être une chaîne' })
  @MinLength(2, { message: 'Le prénom doit contenir au moins 2 caractères' })
  firstName: string

  @IsString({ message: 'Le nom doit être une chaîne' })
  @MinLength(2, { message: 'Le nom doit contenir au moins 2 caractères' })
  lastName: string

  @IsOptional()
  @IsString()
  avatar?: string
}

// dto/user-response.dto.ts
export interface UserResponseDto {
  id: string
  email: string
  firstName: string
  lastName: string
  avatar?: string
  createdAt: Date
  updatedAt: Date
}
```

## Services

### Logique Métier
- Encapsuler la logique métier dans les services
- Un service par entité principale
- Gestion d'erreurs appropriée
- Services stateless (sans état)

```typescript
@Injectable()
export class ConversationService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly redis: RedisService,
    private readonly eventEmitter: EventEmitter2
  ) {}

  async createConversation(participants: string[]): Promise<Conversation> {
    if (participants.length !== 2) {
      throw new BadRequestException('Une conversation doit avoir exactement 2 participants')
    }

    const conversation = await this.prisma.conversation.create({
      data: {
        participants: {
          create: participants.map(userId => ({ userId }))
        }
      },
      include: {
        participants: {
          include: { user: true }
        }
      }
    })

    // Cache la conversation dans Redis
    await this.cacheConversation(conversation)

    // Émet un événement pour notifier la création
    this.eventEmitter.emit('conversation.created', conversation)

    return conversation
  }

  async addXpAndComputeLevel(conversationId: string): Promise<ProgressionResult> {
    const conversation = await this.findById(conversationId)
    if (!conversation) {
      throw new NotFoundException('Conversation non trouvée')
    }

    const newXp = conversation.experiencePoints + XP_PER_ICEBREAKER
    const newLevel = this.calculateLevel(newXp)

    await this.prisma.conversation.update({
      where: { id: conversationId },
      data: {
        experiencePoints: newXp,
        level: newLevel
      }
    })

    return { experiencePoints: newXp, level: newLevel }
  }

  private calculateLevel(xp: number): number {
    return Math.floor(xp / XP_PER_LEVEL) + 1
  }

  private async cacheConversation(conversation: Conversation): Promise<void> {
    const cacheKey = `conversation:${conversation.id}`
    await this.redis.set(cacheKey, JSON.stringify(conversation), 'EX', 3600)
  }
}
```

## WebSocket Gateway

### Gestion Temps Réel
- Utiliser les WebSocket Gateways pour la communication temps réel
- Gérer la connexion/déconnexion des clients
- Sécuriser les WebSockets avec l'authentification
- **OBLIGATOIRE** : Implémenter du rate limiting sur tous les événements

### Rate Limiting WebSocket
```typescript
// ✅ BON - Rate limiting par événement
@Injectable()
export class WebSocketRateLimitGuard implements CanActivate {
  private rateLimiters = new Map<string, Map<string, number[]>>()
  
  canActivate(context: ExecutionContext): boolean {
    const client = context.switchToWs().getClient()
    const userId = client.data.userId
    const eventName = context.getHandler().name
    
    if (!this.checkRateLimit(userId, eventName)) {
      throw new WsException('Rate limit dépassé')
    }
    
    return true
  }
  
  private checkRateLimit(userId: string, eventName: string): boolean {
    const limits = {
      sendMessage: { max: 30, window: 60000 },      // 30 messages/minute
      typing: { max: 60, window: 60000 },           // 60 typing/minute  
      icebreakerReady: { max: 10, window: 60000 }   // 10 icebreaker/minute
    }
    
    const limit = limits[eventName] || { max: 100, window: 60000 }
    // Implémentation du rate limiting...
  }
}

// Usage
@UseGuards(WebSocketRateLimitGuard)
@SubscribeMessage('sendMessage')
async handleSendMessage(/* ... */) {
  // Protégé automatiquement
}
```

```typescript
@WebSocketGateway({
  cors: {
    origin: process.env.NODE_ENV === 'production' 
      ? 'https://joots.app' 
      : 'http://localhost:3000',
    credentials: true
  },
  namespace: 'chat'
})
export class ChatGateway extends BaseGateway {
  constructor(
    private readonly icebreakerService: IcebreakerService,
    private readonly questionService: QuestionService,
    private readonly prisma: PrismaService,
    private readonly redis: RedisService
  ) {
    super()
  }

  @SubscribeMessage('icebreakerReady')
  async handleIcebreakerReady(
    @ConnectedSocket() client: Socket,
    @MessageBody() data: { conversationId: string; userId: string; isIcebreakerReady: boolean }
  ) {
    const { conversationId, userId, isIcebreakerReady } = data

    // Vérification d'autorisation
    if (userId !== client.data.userId) {
      throw new UnauthorizedException('Non autorisé')
    }

    try {
      await this.icebreakerService.setParticipantIcebreakerReady(
        conversationId, 
        userId, 
        isIcebreakerReady
      )

      // Émettre la mise à jour à tous les clients de la conversation
      client.join(conversationId)
      this.emitIcebreakerStatusUpdate(conversationId, userId, isIcebreakerReady)

      const allReady = await this.icebreakerService.areAllParticipantsReady(conversationId)
      if (allReady) {
        await this.triggerIcebreakerQuestion(conversationId, client)
      }

      return { success: true, userId, isIcebreakerReady }
    } catch (error) {
      this.logger.error(`Erreur icebreaker ready: ${error.message}`)
      throw new WsException(error.message)
    }
  }

  private emitIcebreakerStatusUpdate(
    conversationId: string, 
    userId: string, 
    isReady: boolean
  ): void {
    this.server.to(conversationId).emit('icebreakerStatusUpdated', {
      userId,
      conversationId,
      isIcebreakerReady: isReady,
      timestamp: new Date().toISOString()
    })
  }
}
```

## Gestion d'Erreurs

### Filtres d'Exception Globaux
```typescript
@Catch()
export class AllExceptionsFilter implements ExceptionFilter {
  private readonly logger = new Logger(AllExceptionsFilter.name)

  catch(exception: unknown, host: ArgumentsHost): void {
    const ctx = host.switchToHttp()
    const response = ctx.getResponse<Response>()
    const request = ctx.getRequest<Request>()

    let status = HttpStatus.INTERNAL_SERVER_ERROR
    let message = 'Erreur interne du serveur'

    if (exception instanceof HttpException) {
      status = exception.getStatus()
      message = exception.message
    } else if (exception instanceof Error) {
      message = exception.message
    }

    const errorResponse = {
      statusCode: status,
      timestamp: new Date().toISOString(),
      path: request.url,
      message
    }

    this.logger.error(
      `${request.method} ${request.url}`,
      exception instanceof Error ? exception.stack : exception
    )

    response.status(status).json(errorResponse)
  }
}
```

## Configuration et Environnement

### Variables d'Environnement
```typescript
// config/configuration.ts
export default () => ({
  port: parseInt(process.env.PORT, 10) || 3000,
  database: {
    url: process.env.DATABASE_URL
  },
  redis: {
    host: process.env.REDIS_HOST || 'localhost',
    port: parseInt(process.env.REDIS_PORT, 10) || 6379,
    password: process.env.REDIS_PASSWORD
  },
  jwt: {
    secret: process.env.JWT_SECRET,
    expiresIn: process.env.JWT_EXPIRES_IN || '24h'
  }
})

// Validation des variables d'environnement
import { IsString, IsNumber, IsOptional } from 'class-validator'

export class EnvironmentVariables {
  @IsNumber()
  PORT: number

  @IsString()
  DATABASE_URL: string

  @IsString()
  JWT_SECRET: string

  @IsOptional()
  @IsString()
  JWT_EXPIRES_IN: string
}
```

## Tests

### Tests Unitaires
```typescript
describe('UserService', () => {
  let service: UserService
  let prisma: jest.Mocked<PrismaService>

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UserService,
        {
          provide: PrismaService,
          useValue: {
            user: {
              create: jest.fn(),
              findUnique: jest.fn(),
              update: jest.fn(),
              delete: jest.fn()
            }
          }
        }
      ]
    }).compile()

    service = module.get<UserService>(UserService)
    prisma = module.get(PrismaService)
  })

  describe('createUser', () => {
    it('should create a user successfully', async () => {
      // Arrange
      const createUserDto = {
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
      const expectedUser = { id: '1', ...createUserDto }

      prisma.user.findUnique.mockResolvedValue(null)
      prisma.user.create.mockResolvedValue(expectedUser)

      // Act
      const actualUser = await service.createUser(createUserDto)

      // Assert
      expect(actualUser).toEqual(expectedUser)
      expect(prisma.user.create).toHaveBeenCalledWith({
        data: createUserDto
      })
    })

    it('should throw ConflictException if user already exists', async () => {
      // Arrange
      const createUserDto = {
        email: 'existing@example.com',
        firstName: 'John',
        lastName: 'Doe'
      }
      const existingUser = { id: '1', ...createUserDto }

      prisma.user.findUnique.mockResolvedValue(existingUser)

      // Act & Assert
      await expect(service.createUser(createUserDto))
        .rejects
        .toThrow(ConflictException)
    })
  })
})
``` 