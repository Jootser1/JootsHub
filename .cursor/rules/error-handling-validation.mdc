# RÃ¨gles Gestion d'Erreurs & Validation - JootsHub

## ðŸš¨ Philosophie Gestion d'Erreurs

### Principes Fondamentaux
- **Fail Fast** : DÃ©tecter et signaler les erreurs rapidement
- **User-Friendly** : Messages d'erreur comprÃ©hensibles pour l'utilisateur
- **Logging StructurÃ©** : TraÃ§abilitÃ© complÃ¨te pour le debugging
- **Graceful Degradation** : L'application continue de fonctionner malgrÃ© les erreurs
- **Security First** : Ne jamais exposer d'informations sensibles

### Architecture d'Erreurs JootsHub
```typescript
// HiÃ©rarchie des erreurs
BaseError
â”œâ”€â”€ ValidationError (400)
â”œâ”€â”€ AuthenticationError (401)
â”œâ”€â”€ AuthorizationError (403)
â”œâ”€â”€ NotFoundError (404)
â”œâ”€â”€ ConflictError (409)
â”œâ”€â”€ RateLimitError (429)
â””â”€â”€ InternalServerError (500)
```

## ðŸ”§ Classes d'Erreurs Backend

### âœ… **Erreurs PersonnalisÃ©es NestJS**
```typescript
// joots-backend/src/common/exceptions/base.exception.ts
export abstract class BaseException extends Error {
  abstract readonly statusCode: number
  abstract readonly errorCode: string
  
  constructor(
    message: string,
    public readonly context?: Record<string, any>
  ) {
    super(message)
    this.name = this.constructor.name
  }

  toJSON() {
    return {
      name: this.name,
      message: this.message,
      statusCode: this.statusCode,
      errorCode: this.errorCode,
      context: this.context,
      timestamp: new Date().toISOString()
    }
  }
}

// Erreurs spÃ©cifiques
export class ValidationException extends BaseException {
  readonly statusCode = 400
  readonly errorCode = 'VALIDATION_ERROR'
}

export class AuthenticationException extends BaseException {
  readonly statusCode = 401
  readonly errorCode = 'AUTHENTICATION_ERROR'
}

export class AuthorizationException extends BaseException {
  readonly statusCode = 403
  readonly errorCode = 'AUTHORIZATION_ERROR'
}

export class ResourceNotFoundException extends BaseException {
  readonly statusCode = 404
  readonly errorCode = 'RESOURCE_NOT_FOUND'
}

export class ConflictException extends BaseException {
  readonly statusCode = 409
  readonly errorCode = 'RESOURCE_CONFLICT'
}

export class RateLimitException extends BaseException {
  readonly statusCode = 429
  readonly errorCode = 'RATE_LIMIT_EXCEEDED'
}

export class InternalServerException extends BaseException {
  readonly statusCode = 500
  readonly errorCode = 'INTERNAL_SERVER_ERROR'
}
```

### âœ… **Exception Filter Global**
```typescript
// joots-backend/src/common/filters/global-exception.filter.ts
import { ExceptionFilter, Catch, ArgumentsHost, HttpException, HttpStatus } from '@nestjs/common'
import { Request, Response } from 'express'
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library'
import { BaseException } from '../exceptions/base.exception'

@Catch()
export class GlobalExceptionFilter implements ExceptionFilter {
  catch(exception: unknown, host: ArgumentsHost) {
    const ctx = host.switchToHttp()
    const response = ctx.getResponse<Response>()
    const request = ctx.getRequest<Request>()

    let status: number
    let message: string
    let errorCode: string
    let context: any = {}

    // Gestion des erreurs personnalisÃ©es
    if (exception instanceof BaseException) {
      status = exception.statusCode
      message = exception.message
      errorCode = exception.errorCode
      context = exception.context
    }
    // Gestion des erreurs HTTP NestJS
    else if (exception instanceof HttpException) {
      status = exception.getStatus()
      const response = exception.getResponse()
      message = typeof response === 'string' ? response : (response as any).message
      errorCode = 'HTTP_EXCEPTION'
    }
    // Gestion des erreurs Prisma
    else if (exception instanceof PrismaClientKnownRequestError) {
      const prismaError = this.handlePrismaError(exception)
      status = prismaError.status
      message = prismaError.message
      errorCode = prismaError.errorCode
    }
    // Erreurs inconnues
    else {
      status = HttpStatus.INTERNAL_SERVER_ERROR
      message = 'Une erreur interne est survenue'
      errorCode = 'INTERNAL_SERVER_ERROR'
      
      // Logger l'erreur complÃ¨te pour debugging
      console.error('Unhandled exception:', exception)
    }

    const errorResponse = {
      statusCode: status,
      errorCode,
      message,
      context,
      timestamp: new Date().toISOString(),
      path: request.url,
      method: request.method,
      ...(process.env.NODE_ENV === 'development' && {
        stack: exception instanceof Error ? exception.stack : undefined
      })
    }

    // Logger l'erreur
    this.logError(errorResponse, request)

    response.status(status).json(errorResponse)
  }

  private handlePrismaError(error: PrismaClientKnownRequestError) {
    switch (error.code) {
      case 'P2002':
        return {
          status: 409,
          message: 'Cette ressource existe dÃ©jÃ ',
          errorCode: 'UNIQUE_CONSTRAINT_VIOLATION'
        }
      case 'P2025':
        return {
          status: 404,
          message: 'Ressource non trouvÃ©e',
          errorCode: 'RECORD_NOT_FOUND'
        }
      case 'P2003':
        return {
          status: 400,
          message: 'RÃ©fÃ©rence invalide',
          errorCode: 'FOREIGN_KEY_CONSTRAINT'
        }
      default:
        return {
          status: 500,
          message: 'Erreur de base de donnÃ©es',
          errorCode: 'DATABASE_ERROR'
        }
    }
  }

  private logError(errorResponse: any, request: Request) {
    const logData = {
      level: 'error',
      message: errorResponse.message,
      errorCode: errorResponse.errorCode,
      statusCode: errorResponse.statusCode,
      path: request.url,
      method: request.method,
      userAgent: request.get('User-Agent'),
      ip: request.ip,
      userId: (request as any).user?.id,
      timestamp: errorResponse.timestamp
    }

    console.error(JSON.stringify(logData))
  }
}
```

## âœ… Validation Backend (class-validator)

### âœ… **DTOs avec Validation**
```typescript
// joots-backend/src/users/dto/create-user.dto.ts
import { IsEmail, IsString, MinLength, MaxLength, IsOptional, IsArray, IsEnum } from 'class-validator'
import { Transform } from 'class-transformer'
import { LocaleCode } from '@prisma/client'

export class CreateUserDto {
  @IsString({ message: 'Le nom d\'utilisateur doit Ãªtre une chaÃ®ne de caractÃ¨res' })
  @MinLength(3, { message: 'Le nom d\'utilisateur doit contenir au moins 3 caractÃ¨res' })
  @MaxLength(30, { message: 'Le nom d\'utilisateur ne peut pas dÃ©passer 30 caractÃ¨res' })
  @Transform(({ value }) => value?.trim().toLowerCase())
  username: string

  @IsEmail({}, { message: 'L\'email doit Ãªtre valide' })
  @Transform(({ value }) => value?.trim().toLowerCase())
  email: string

  @IsString({ message: 'Le mot de passe doit Ãªtre une chaÃ®ne de caractÃ¨res' })
  @MinLength(8, { message: 'Le mot de passe doit contenir au moins 8 caractÃ¨res' })
  password: string

  @IsOptional()
  @IsString({ message: 'La bio doit Ãªtre une chaÃ®ne de caractÃ¨res' })
  @MaxLength(500, { message: 'La bio ne peut pas dÃ©passer 500 caractÃ¨res' })
  bio?: string

  @IsOptional()
  @IsArray({ message: 'Les langues doivent Ãªtre un tableau' })
  @IsEnum(LocaleCode, { each: true, message: 'Code de langue invalide' })
  languages?: LocaleCode[]
}

// joots-backend/src/messages/dto/create-message.dto.ts
export class CreateMessageDto {
  @IsString({ message: 'Le contenu du message est requis' })
  @MinLength(1, { message: 'Le message ne peut pas Ãªtre vide' })
  @MaxLength(2000, { message: 'Le message ne peut pas dÃ©passer 2000 caractÃ¨res' })
  @Transform(({ value }) => value?.trim())
  content: string

  @IsString({ message: 'L\'ID de conversation est requis' })
  conversationId: string

  @IsOptional()
  @IsEnum(MessageType, { message: 'Type de message invalide' })
  messageType?: MessageType
}
```

### âœ… **Validation Pipe PersonnalisÃ©**
```typescript
// joots-backend/src/common/pipes/validation.pipe.ts
import { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common'
import { validate } from 'class-validator'
import { plainToClass } from 'class-transformer'

@Injectable()
export class CustomValidationPipe implements PipeTransform<any> {
  async transform(value: any, { metatype }: ArgumentMetadata) {
    if (!metatype || !this.toValidate(metatype)) {
      return value
    }

    const object = plainToClass(metatype, value)
    const errors = await validate(object, {
      whitelist: true, // Supprimer les propriÃ©tÃ©s non dÃ©finies
      forbidNonWhitelisted: true, // Rejeter les propriÃ©tÃ©s non autorisÃ©es
      transform: true // Appliquer les transformations
    })

    if (errors.length > 0) {
      const errorMessages = errors.map(error => {
        return Object.values(error.constraints || {}).join(', ')
      }).join('; ')

      throw new BadRequestException({
        message: 'DonnÃ©es de validation invalides',
        errors: errorMessages,
        statusCode: 400
      })
    }

    return object
  }

  private toValidate(metatype: Function): boolean {
    const types: Function[] = [String, Boolean, Number, Array, Object]
    return !types.includes(metatype)
  }
}
```

## ðŸŽ¨ Gestion d'Erreurs Frontend

### âœ… **Types d'Erreurs Frontend**
```typescript
// joots-frontend/src/types/error.ts
export interface ApiError {
  statusCode: number
  errorCode: string
  message: string
  context?: Record<string, any>
  timestamp: string
  path?: string
}

export interface ValidationError extends ApiError {
  errors: Record<string, string[]>
}

export interface NetworkError {
  type: 'NETWORK_ERROR'
  message: string
  isOffline: boolean
}

export type AppError = ApiError | ValidationError | NetworkError
```

### âœ… **Hook de Gestion d'Erreurs**
```typescript
// joots-frontend/src/hooks/useErrorHandler.ts
import { useCallback } from 'react'
import { toast } from 'sonner'
import { ApiError, NetworkError } from '@/types/error'

export function useErrorHandler() {
  const handleError = useCallback((error: unknown) => {
    console.error('Error caught:', error)

    // Erreur rÃ©seau
    if (isNetworkError(error)) {
      toast.error('ProblÃ¨me de connexion', {
        description: 'VÃ©rifiez votre connexion internet'
      })
      return
    }

    // Erreur API
    if (isApiError(error)) {
      const message = getErrorMessage(error)
      
      switch (error.statusCode) {
        case 400:
          toast.error('DonnÃ©es invalides', { description: message })
          break
        case 401:
          toast.error('Non autorisÃ©', { description: 'Veuillez vous reconnecter' })
          // Rediriger vers login
          window.location.href = '/login'
          break
        case 403:
          toast.error('AccÃ¨s refusÃ©', { description: message })
          break
        case 404:
          toast.error('Ressource non trouvÃ©e', { description: message })
          break
        case 409:
          toast.error('Conflit', { description: message })
          break
        case 429:
          toast.error('Trop de requÃªtes', { 
            description: 'Veuillez patienter avant de rÃ©essayer' 
          })
          break
        default:
          toast.error('Erreur serveur', { description: message })
      }
      return
    }

    // Erreur inconnue
    toast.error('Une erreur inattendue est survenue')
  }, [])

  return { handleError }
}

function isNetworkError(error: unknown): error is NetworkError {
  return typeof error === 'object' && error !== null && 'type' in error && 
         (error as any).type === 'NETWORK_ERROR'
}

function isApiError(error: unknown): error is ApiError {
  return typeof error === 'object' && error !== null && 
         'statusCode' in error && 'errorCode' in error
}

function getErrorMessage(error: ApiError): string {
  // Messages personnalisÃ©s selon le code d'erreur
  const errorMessages: Record<string, string> = {
    'VALIDATION_ERROR': 'Les donnÃ©es saisies sont invalides',
    'AUTHENTICATION_ERROR': 'Identifiants incorrects',
    'AUTHORIZATION_ERROR': 'Vous n\'avez pas les permissions nÃ©cessaires',
    'RESOURCE_NOT_FOUND': 'La ressource demandÃ©e n\'existe pas',
    'RESOURCE_CONFLICT': 'Cette ressource existe dÃ©jÃ ',
    'RATE_LIMIT_EXCEEDED': 'Trop de tentatives, veuillez patienter'
  }

  return errorMessages[error.errorCode] || error.message
}
```

### âœ… **Error Boundary React**
```typescript
// joots-frontend/src/components/ErrorBoundary.tsx
import React, { Component, ErrorInfo, ReactNode } from 'react'
import { Button } from '@/components/ui/button'
import { AlertTriangle, RefreshCw } from 'lucide-react'

interface Props {
  children: ReactNode
  fallback?: ReactNode
}

interface State {
  hasError: boolean
  error?: Error
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error }
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo)
    
    // Envoyer l'erreur Ã  un service de monitoring
    if (process.env.NODE_ENV === 'production') {
      // Sentry, LogRocket, etc.
    }
  }

  handleRetry = () => {
    this.setState({ hasError: false, error: undefined })
  }

  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback
      }

      return (
        <div className="flex flex-col items-center justify-center min-h-[400px] p-8 text-center">
          <AlertTriangle className="h-16 w-16 text-red-500 mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">
            Oups ! Une erreur est survenue
          </h2>
          <p className="text-gray-600 mb-6 max-w-md">
            Nous sommes dÃ©solÃ©s, quelque chose s'est mal passÃ©. 
            Veuillez rÃ©essayer ou rafraÃ®chir la page.
          </p>
          
          <div className="flex gap-4">
            <Button onClick={this.handleRetry} variant="outline">
              <RefreshCw className="h-4 w-4 mr-2" />
              RÃ©essayer
            </Button>
            <Button onClick={() => window.location.reload()}>
              RafraÃ®chir la page
            </Button>
          </div>

          {process.env.NODE_ENV === 'development' && this.state.error && (
            <details className="mt-8 p-4 bg-gray-100 rounded-lg text-left max-w-2xl">
              <summary className="cursor-pointer font-medium">
                DÃ©tails de l'erreur (dev)
              </summary>
              <pre className="mt-2 text-sm text-red-600 whitespace-pre-wrap">
                {this.state.error.stack}
              </pre>
            </details>
          )}
        </div>
      )
    }

    return this.props.children
  }
}
```

## âœ… Validation Frontend (Zod + React Hook Form)

### âœ… **SchÃ©mas de Validation Zod**
```typescript
// joots-frontend/src/lib/validations/user.ts
import { z } from 'zod'

export const createUserSchema = z.object({
  username: z
    .string()
    .min(3, 'Le nom d\'utilisateur doit contenir au moins 3 caractÃ¨res')
    .max(30, 'Le nom d\'utilisateur ne peut pas dÃ©passer 30 caractÃ¨res')
    .regex(/^[a-zA-Z0-9_-]+$/, 'Le nom d\'utilisateur ne peut contenir que des lettres, chiffres, _ et -')
    .transform(val => val.trim().toLowerCase()),
  
  email: z
    .string()
    .email('L\'email doit Ãªtre valide')
    .transform(val => val.trim().toLowerCase()),
  
  password: z
    .string()
    .min(8, 'Le mot de passe doit contenir au moins 8 caractÃ¨res')
    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, 
           'Le mot de passe doit contenir au moins une minuscule, une majuscule et un chiffre'),
  
  confirmPassword: z.string(),
  
  bio: z
    .string()
    .max(500, 'La bio ne peut pas dÃ©passer 500 caractÃ¨res')
    .optional()
    .transform(val => val?.trim())
}).refine(data => data.password === data.confirmPassword, {
  message: 'Les mots de passe ne correspondent pas',
  path: ['confirmPassword']
})

export const createMessageSchema = z.object({
  content: z
    .string()
    .min(1, 'Le message ne peut pas Ãªtre vide')
    .max(2000, 'Le message ne peut pas dÃ©passer 2000 caractÃ¨res')
    .transform(val => val.trim()),
  
  conversationId: z.string().cuid('ID de conversation invalide')
})

export type CreateUserInput = z.infer<typeof createUserSchema>
export type CreateMessageInput = z.infer<typeof createMessageSchema>
```

### âœ… **Formulaire avec Validation**
```typescript
// joots-frontend/src/components/forms/CreateUserForm.tsx
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { createUserSchema, CreateUserInput } from '@/lib/validations/user'
import { useErrorHandler } from '@/hooks/useErrorHandler'

export function CreateUserForm() {
  const { handleError } = useErrorHandler()
  
  const form = useForm<CreateUserInput>({
    resolver: zodResolver(createUserSchema),
    defaultValues: {
      username: '',
      email: '',
      password: '',
      confirmPassword: '',
      bio: ''
    }
  })

  const onSubmit = async (data: CreateUserInput) => {
    try {
      const response = await fetch('/api/users', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      })

      if (!response.ok) {
        const error = await response.json()
        throw error
      }

      const user = await response.json()
      toast.success('Compte crÃ©Ã© avec succÃ¨s !')
      
    } catch (error) {
      handleError(error)
    }
  }

  return (
    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
      <div>
        <label htmlFor="username" className="block text-sm font-medium">
          Nom d'utilisateur
        </label>
        <input
          {...form.register('username')}
          type="text"
          className="mt-1 block w-full rounded-md border-gray-300"
        />
        {form.formState.errors.username && (
          <p className="mt-1 text-sm text-red-600">
            {form.formState.errors.username.message}
          </p>
        )}
      </div>

      <div>
        <label htmlFor="email" className="block text-sm font-medium">
          Email
        </label>
        <input
          {...form.register('email')}
          type="email"
          className="mt-1 block w-full rounded-md border-gray-300"
        />
        {form.formState.errors.email && (
          <p className="mt-1 text-sm text-red-600">
            {form.formState.errors.email.message}
          </p>
        )}
      </div>

      <Button 
        type="submit" 
        disabled={form.formState.isSubmitting}
        className="w-full"
      >
        {form.formState.isSubmitting ? 'CrÃ©ation...' : 'CrÃ©er le compte'}
      </Button>
    </form>
  )
}
```

## ðŸ”„ Retry et Circuit Breaker

### âœ… **Retry Logic avec Exponential Backoff**
```typescript
// joots-frontend/src/lib/retry.ts
export interface RetryOptions {
  maxAttempts: number
  baseDelay: number
  maxDelay: number
  backoffFactor: number
}

export async function withRetry<T>(
  fn: () => Promise<T>,
  options: Partial<RetryOptions> = {}
): Promise<T> {
  const {
    maxAttempts = 3,
    baseDelay = 1000,
    maxDelay = 10000,
    backoffFactor = 2
  } = options

  let lastError: Error

  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    try {
      return await fn()
    } catch (error) {
      lastError = error as Error
      
      // Ne pas retry sur certaines erreurs
      if (error instanceof Error && shouldNotRetry(error)) {
        throw error
      }

      if (attempt === maxAttempts) {
        break
      }

      // Calculer le dÃ©lai avec exponential backoff
      const delay = Math.min(
        baseDelay * Math.pow(backoffFactor, attempt - 1),
        maxDelay
      )

      await new Promise(resolve => setTimeout(resolve, delay))
    }
  }

  throw lastError!
}

function shouldNotRetry(error: Error): boolean {
  // Ne pas retry sur les erreurs 4xx (sauf 429)
  if ('statusCode' in error) {
    const statusCode = (error as any).statusCode
    return statusCode >= 400 && statusCode < 500 && statusCode !== 429
  }
  
  return false
}
```

### âœ… **Circuit Breaker Pattern**
```typescript
// joots-frontend/src/lib/circuit-breaker.ts
export class CircuitBreaker {
  private failures = 0
  private lastFailureTime = 0
  private state: 'CLOSED' | 'OPEN' | 'HALF_OPEN' = 'CLOSED'

  constructor(
    private threshold: number = 5,
    private timeout: number = 60000 // 1 minute
  ) {}

  async execute<T>(fn: () => Promise<T>): Promise<T> {
    if (this.state === 'OPEN') {
      if (Date.now() - this.lastFailureTime > this.timeout) {
        this.state = 'HALF_OPEN'
      } else {
        throw new Error('Circuit breaker is OPEN')
      }
    }

    try {
      const result = await fn()
      this.onSuccess()
      return result
    } catch (error) {
      this.onFailure()
      throw error
    }
  }

  private onSuccess() {
    this.failures = 0
    this.state = 'CLOSED'
  }

  private onFailure() {
    this.failures++
    this.lastFailureTime = Date.now()
    
    if (this.failures >= this.threshold) {
      this.state = 'OPEN'
    }
  }
}
```

## ðŸ“‹ Checklist Gestion d'Erreurs

### âœ… **Backend :**
- [ ] Classes d'erreurs personnalisÃ©es dÃ©finies
- [ ] Exception filter global configurÃ©
- [ ] Validation avec class-validator sur tous les DTOs
- [ ] Gestion des erreurs Prisma
- [ ] Logging structurÃ© des erreurs
- [ ] Messages d'erreur localisÃ©s

### âœ… **Frontend :**
- [ ] Error Boundary pour capturer les erreurs React
- [ ] Hook useErrorHandler pour la gestion centralisÃ©e
- [ ] Validation Zod sur tous les formulaires
- [ ] Toast notifications pour les erreurs utilisateur
- [ ] Retry logic pour les requÃªtes rÃ©seau
- [ ] Circuit breaker pour les services externes

### âœ… **SÃ©curitÃ© :**
- [ ] Pas d'exposition d'informations sensibles
- [ ] Sanitisation des messages d'erreur
- [ ] Rate limiting sur les endpoints sensibles
- [ ] Validation stricte cÃ´tÃ© serveur
- [ ] Audit trail des erreurs critiques

Cette architecture garantit une gestion robuste et user-friendly des erreurs dans JootsHub ! ðŸš¨ 