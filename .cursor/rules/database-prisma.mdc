# R√®gles Base de Donn√©es & Prisma - JootsHub

## üóÑÔ∏è Philosophie Base de Donn√©es

### Principes Fondamentaux
- **Schema First** : Le sch√©ma Prisma est la source de v√©rit√©
- **Type Safety** : Utiliser les types g√©n√©r√©s par Prisma
- **Performance** : Optimiser les requ√™tes avec includes/selects
- **Migrations** : Toujours versionner les changements de sch√©ma
- **Relations** : Mod√©liser correctement les relations m√©tier

### Architecture JootsHub
```typescript
// Mod√®les principaux
User -> Auth (1:1)
User -> UserContact (N:M)
User -> Conversation via ConversationParticipant (N:M)
Conversation -> Message (1:N)
QuestionGroup -> Question (1:N)
QuestionGroup -> QuestionOption (1:N)
User -> UserAnswer (1:N)
```

## üìã R√®gles Prisma Schema

### ‚úÖ **Conventions de Nommage**
```prisma
// PascalCase pour les mod√®les
model User {}
model ConversationParticipant {}

// camelCase pour les champs
model User {
  id        String
  createdAt DateTime
  isOnline  Boolean
}

// SCREAMING_SNAKE_CASE pour les enums
enum UserRole {
  USER
  MODERATOR
  ADMIN
}

// snake_case pour les valeurs d'enum
enum LocaleCode {
  fr_FR
  en_US
  es_ES
}
```

### ‚úÖ **Champs Obligatoires**
```prisma
model BaseModel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Toujours inclure ces champs pour l'audit
model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // ... autres champs
}
```

### ‚úÖ **Relations et Contraintes**
```prisma
// Relations 1:1 avec contrainte unique
model Auth {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

// Relations N:M avec table de liaison explicite
model ConversationParticipant {
  conversationId String
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  
  @@id([conversationId, userId])
  @@unique([conversationId, userId])
}

// Cascade DELETE pour les donn√©es d√©pendantes
model UserAnswer {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
```

### ‚úÖ **Index et Performance**
```prisma
model Message {
  id             String @id @default(uuid())
  conversationId String
  senderId       String?
  
  // Index sur les champs de recherche fr√©quents
  @@index([conversationId])
  @@index([senderId])
  @@index([messageType])
  @@index([createdAt])
}

model UserContact {
  userId    String
  contactId String
  
  // Index composites pour les requ√™tes complexes
  @@index([userId])
  @@index([contactId])
  @@id([userId, contactId])
}
```

## üîß Service Prisma

### ‚úÖ **Configuration du Service**
```typescript
// joots-backend/src/prisma/prisma.service.ts
import { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common'
import { PrismaClient } from '@prisma/client'

@Injectable()
export class PrismaService
  extends PrismaClient
  implements OnModuleInit, OnModuleDestroy
{
  constructor() {
    super({
      log: ['query', 'info', 'warn', 'error'],
      errorFormat: 'pretty',
    })
  }

  async onModuleInit() {
    await this.$connect()
    
    // Middleware pour logging des requ√™tes lentes
    this.$use(async (params, next) => {
      const before = Date.now()
      const result = await next(params)
      const after = Date.now()
      
      if (after - before > 1000) {
        console.warn(`Slow query detected: ${params.model}.${params.action} took ${after - before}ms`)
      }
      
      return result
    })
  }

  async onModuleDestroy() {
    await this.$disconnect()
  }

  // Helper pour les transactions
  async executeTransaction<T>(
    fn: (prisma: PrismaClient) => Promise<T>
  ): Promise<T> {
    return this.$transaction(fn)
  }

  // Helper pour le nettoyage des tests
  async cleanDatabase() {
    if (process.env.NODE_ENV !== 'test') {
      throw new Error('cleanDatabase can only be used in test environment')
    }
    
    const tablenames = await this.$queryRaw<Array<{ tablename: string }>>`
      SELECT tablename FROM pg_tables WHERE schemaname='public'
    `
    
    for (const { tablename } of tablenames) {
      if (tablename !== '_prisma_migrations') {
        await this.$executeRawUnsafe(`TRUNCATE TABLE "public"."${tablename}" CASCADE;`)
      }
    }
  }
}
```

## üìä Patterns de Requ√™tes

### ‚úÖ **Requ√™tes Optimis√©es**
```typescript
// ‚ùå N+1 Problem - √Ä √©viter
async getBadConversations(userId: string) {
  const conversations = await this.prisma.conversation.findMany({
    where: { participants: { some: { userId } } }
  })
  
  // N+1 queries !
  for (const conv of conversations) {
    conv.messages = await this.prisma.message.findMany({
      where: { conversationId: conv.id }
    })
  }
  
  return conversations
}

// ‚úÖ Requ√™te optimis√©e avec include
async getOptimizedConversations(userId: string) {
  return this.prisma.conversation.findMany({
    where: {
      participants: {
        some: { userId }
      }
    },
    include: {
      participants: {
        include: {
          user: {
            select: {
              id: true,
              username: true,
              avatar: true,
              isOnline: true
            }
          }
        }
      },
      messages: {
        take: 50, // Limiter le nombre de messages
        orderBy: { createdAt: 'desc' },
        include: {
          sender: {
            select: {
              id: true,
              username: true,
              avatar: true
            }
          }
        }
      }
    },
    orderBy: { updatedAt: 'desc' }
  })
}

// ‚úÖ Requ√™te avec select pour limiter les donn√©es
async getUserProfile(userId: string) {
  return this.prisma.user.findUnique({
    where: { id: userId },
    select: {
      id: true,
      username: true,
      avatar: true,
      bio: true,
      isOnline: true,
      role: true,
      languages: true,
      createdAt: true,
      // Exclure les champs sensibles
      auth: false
    }
  })
}
```

### ‚úÖ **Requ√™tes Complexes avec Raw SQL**
```typescript
// Pour les requ√™tes tr√®s complexes, utiliser du SQL brut
async getConversationStats(conversationId: string) {
  return this.prisma.$queryRaw<Array<{
    total_messages: number
    messages_today: number
    avg_response_time: number
  }>>`
    SELECT 
      COUNT(*) as total_messages,
      COUNT(CASE WHEN DATE(created_at) = CURRENT_DATE THEN 1 END) as messages_today,
      AVG(EXTRACT(EPOCH FROM (created_at - LAG(created_at) OVER (ORDER BY created_at)))) as avg_response_time
    FROM "Message" 
    WHERE conversation_id = ${conversationId}
  `
}

// Requ√™te pour les statistiques utilisateur
async getUserActivityStats(userId: string) {
  return this.prisma.$queryRaw<Array<{
    conversations_count: number
    messages_sent: number
    questions_answered: number
    last_activity: Date
  }>>`
    SELECT 
      (SELECT COUNT(*) FROM "ConversationParticipant" WHERE user_id = ${userId}) as conversations_count,
      (SELECT COUNT(*) FROM "Message" WHERE sender_id = ${userId}) as messages_sent,
      (SELECT COUNT(*) FROM "UserAnswer" WHERE user_id = ${userId}) as questions_answered,
      (SELECT MAX(created_at) FROM "Message" WHERE sender_id = ${userId}) as last_activity
  `
}
```

### ‚úÖ **Transactions et Op√©rations Atomiques**
```typescript
// Transaction pour cr√©er une conversation avec participants
async createConversationWithParticipants(
  participantIds: string[],
  locale: LocaleCode = 'fr_FR'
) {
  return this.prisma.$transaction(async (tx) => {
    // Cr√©er la conversation
    const conversation = await tx.conversation.create({
      data: {
        locale,
        xpPoint: 0,
        difficulty: 'INTERMEDIATE'
      }
    })

    // Ajouter les participants
    await tx.conversationParticipant.createMany({
      data: participantIds.map(userId => ({
        conversationId: conversation.id,
        userId
      }))
    })

    // Retourner la conversation compl√®te
    return tx.conversation.findUnique({
      where: { id: conversation.id },
      include: {
        participants: {
          include: {
            user: {
              select: {
                id: true,
                username: true,
                avatar: true,
                isOnline: true
              }
            }
          }
        }
      }
    })
  })
}

// Transaction pour r√©pondre √† une question icebreaker
async submitIcebreakerAnswer(
  userId: string,
  conversationId: string,
  questionGroupId: string,
  optionId: string
) {
  return this.prisma.$transaction(async (tx) => {
    // Cr√©er la r√©ponse
    const answer = await tx.userAnswer.create({
      data: {
        userId,
        questionGroupId,
        questionOptionId: optionId,
        conversationId
      }
    })

    // Marquer le participant comme ayant r√©pondu
    await tx.conversationParticipant.update({
      where: {
        conversationId_userId: {
          conversationId,
          userId
        }
      },
      data: {
        hasGivenAnswer: true,
        isIcebreakerReady: true
      }
    })

    // V√©rifier si tous les participants ont r√©pondu
    const allParticipants = await tx.conversationParticipant.findMany({
      where: { conversationId }
    })

    const allReady = allParticipants.every(p => p.isIcebreakerReady)

    return { answer, allReady }
  })
}
```

## üîÑ Migrations

### ‚úÖ **Bonnes Pratiques de Migration**
```bash
# Cr√©er une migration
npx prisma migrate dev --name add_user_preferences

# Appliquer en production
npx prisma migrate deploy

# Reset en d√©veloppement uniquement
npx prisma migrate reset
```

### ‚úÖ **Migration Complexe avec Donn√©es**
```sql
-- Migration pour ajouter un nouveau champ avec valeur par d√©faut
-- 20250601000000_add_user_level/migration.sql

-- Ajouter la colonne
ALTER TABLE "User" ADD COLUMN "level" INTEGER;

-- Mettre √† jour les donn√©es existantes
UPDATE "User" SET "level" = 1 WHERE "level" IS NULL;

-- Rendre la colonne NOT NULL
ALTER TABLE "User" ALTER COLUMN "level" SET NOT NULL;

-- Ajouter la valeur par d√©faut
ALTER TABLE "User" ALTER COLUMN "level" SET DEFAULT 1;
```

### ‚úÖ **Migration de Donn√©es Complexe**
```typescript
// scripts/migrate-user-attributes.ts
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function migrateUserAttributes() {
  const users = await prisma.user.findMany({
    where: {
      UserAttribute: {
        none: {}
      }
    }
  })

  for (const user of users) {
    await prisma.userAttribute.createMany({
      data: [
        {
          userId: user.id,
          key: 'CITY',
          value: 'Non renseign√©',
          levelRevealed: 1
        },
        {
          userId: user.id,
          key: 'AGE',
          value: '25',
          levelRevealed: 2
        }
      ]
    })
  }

  console.log(`Migrated ${users.length} users`)
}

migrateUserAttributes()
  .catch(console.error)
  .finally(() => prisma.$disconnect())
```

## üß™ Tests avec Prisma

### ‚úÖ **Configuration Test Database**
```typescript
// test/setup.ts
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_TEST_URL
    }
  }
})

beforeEach(async () => {
  // Nettoyer la base de test avant chaque test
  await prisma.userAnswer.deleteMany()
  await prisma.message.deleteMany()
  await prisma.conversationParticipant.deleteMany()
  await prisma.conversation.deleteMany()
  await prisma.userContact.deleteMany()
  await prisma.auth.deleteMany()
  await prisma.user.deleteMany()
})

afterAll(async () => {
  await prisma.$disconnect()
})
```

### ‚úÖ **Factory Pattern pour les Tests**
```typescript
// test/factories/user.factory.ts
import { PrismaClient, User } from '@prisma/client'

export class UserFactory {
  constructor(private prisma: PrismaClient) {}

  async create(overrides: Partial<User> = {}): Promise<User> {
    return this.prisma.user.create({
      data: {
        username: `user_${Date.now()}`,
        userNumber: Math.floor(Math.random() * 10000),
        isOnline: false,
        isAvailableForChat: true,
        role: 'USER',
        languages: ['fr_FR'],
        ...overrides
      }
    })
  }

  async createWithAuth(userOverrides: Partial<User> = {}) {
    const user = await this.create(userOverrides)
    
    const auth = await this.prisma.auth.create({
      data: {
        email: `${user.username}@test.com`,
        password: 'hashedPassword',
        userId: user.id
      }
    })

    return { user, auth }
  }

  async createConversation(participantIds: string[]) {
    const conversation = await this.prisma.conversation.create({
      data: {
        locale: 'fr_FR',
        xpPoint: 0,
        difficulty: 'INTERMEDIATE'
      }
    })

    await this.prisma.conversationParticipant.createMany({
      data: participantIds.map(userId => ({
        conversationId: conversation.id,
        userId
      }))
    })

    return conversation
  }
}
```

## üìà Monitoring et Performance

### ‚úÖ **Logging des Requ√™tes**
```typescript
// Middleware pour logger les requ√™tes lentes
this.$use(async (params, next) => {
  const before = Date.now()
  const result = await next(params)
  const after = Date.now()
  
  const duration = after - before
  
  if (duration > 1000) {
    console.warn(`üêå Slow query detected:`, {
      model: params.model,
      action: params.action,
      duration: `${duration}ms`,
      args: params.args
    })
  }

  // M√©triques pour Prometheus
  if (global.metrics) {
    global.metrics.dbQueryDuration
      .labels(params.model, params.action)
      .observe(duration / 1000)
  }

  return result
})
```

### ‚úÖ **Health Check Database**
```typescript
// health/database.health.ts
import { Injectable } from '@nestjs/common'
import { HealthIndicator, HealthIndicatorResult, HealthCheckError } from '@nestjs/terminus'
import { PrismaService } from '../prisma/prisma.service'

@Injectable()
export class DatabaseHealthIndicator extends HealthIndicator {
  constructor(private prisma: PrismaService) {
    super()
  }

  async isHealthy(key: string): Promise<HealthIndicatorResult> {
    try {
      await this.prisma.$queryRaw`SELECT 1`
      return this.getStatus(key, true)
    } catch (error) {
      throw new HealthCheckError('Database check failed', this.getStatus(key, false))
    }
  }
}
```

## üîí S√©curit√© Base de Donn√©es

### ‚úÖ **Row Level Security (RLS)**
```sql
-- Activer RLS sur les tables sensibles
ALTER TABLE "Message" ENABLE ROW LEVEL SECURITY;

-- Politique pour les messages : un utilisateur ne peut voir que les messages 
-- des conversations auxquelles il participe
CREATE POLICY message_access_policy ON "Message"
  FOR ALL
  TO authenticated_user
  USING (
    conversation_id IN (
      SELECT conversation_id 
      FROM "ConversationParticipant" 
      WHERE user_id = current_user_id()
    )
  );
```

### ‚úÖ **Validation des Donn√©es**
```typescript
// Toujours valider les donn√©es avant insertion
async createUser(userData: CreateUserDto) {
  // Validation m√©tier
  if (!userData.username || userData.username.length < 3) {
    throw new BadRequestException('Username must be at least 3 characters')
  }

  // V√©rifier l'unicit√©
  const existingUser = await this.prisma.user.findUnique({
    where: { username: userData.username }
  })

  if (existingUser) {
    throw new ConflictException('Username already exists')
  }

  // Sanitiser les donn√©es
  const sanitizedData = {
    ...userData,
    username: userData.username.trim().toLowerCase(),
    bio: userData.bio?.substring(0, 500) // Limiter la longueur
  }

  return this.prisma.user.create({
    data: sanitizedData
  })
}
```

## üìã Checklist Base de Donn√©es

### ‚úÖ **D√©veloppement :**
- [ ] Schema Prisma √† jour avec les types TypeScript
- [ ] Relations correctement d√©finies avec contraintes
- [ ] Index sur les champs de recherche fr√©quents
- [ ] Migrations test√©es en local
- [ ] Seed data pour le d√©veloppement

### ‚úÖ **Performance :**
- [ ] Requ√™tes optimis√©es avec select/include appropri√©s
- [ ] Pas de N+1 queries
- [ ] Transactions pour les op√©rations atomiques
- [ ] Monitoring des requ√™tes lentes
- [ ] Cache Redis pour les donn√©es fr√©quemment acc√©d√©es

### ‚úÖ **S√©curit√© :**
- [ ] Validation des donn√©es d'entr√©e
- [ ] Sanitisation des inputs utilisateur
- [ ] Pas d'exposition de donn√©es sensibles
- [ ] Audit trail pour les op√©rations critiques
- [ ] Backup automatique configur√©

### ‚úÖ **Tests :**
- [ ] Base de donn√©es de test s√©par√©e
- [ ] Factories pour cr√©er des donn√©es de test
- [ ] Tests d'int√©gration pour les requ√™tes complexes
- [ ] Nettoyage entre les tests
- [ ] Coverage des services de base de donn√©es

Cette architecture garantit une gestion robuste et performante des donn√©es pour JootsHub ! üóÑÔ∏è 