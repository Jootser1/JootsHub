# RÃ¨gles Tests - JootsHub

## ðŸ§ª Philosophie du Testing

### Principes Fondamentaux
- **Test Pyramid** : Beaucoup de tests unitaires, quelques tests d'intÃ©gration, peu de tests E2E
- **User-Centric Testing** : Tester le comportement utilisateur, pas l'implÃ©mentation
- **Fast Feedback** : Tests rapides et fiables pour un dÃ©veloppement efficace
- **Confidence** : Tests qui donnent confiance dans les dÃ©ploiements
- **Maintainability** : Tests faciles Ã  maintenir et comprendre

### StratÃ©gie de Test JootsHub
```typescript
// Structure de test recommandÃ©e
/*
â”œâ”€â”€ __tests__/
â”‚   â”œâ”€â”€ unit/           // Tests unitaires (70%)
â”‚   â”œâ”€â”€ integration/    // Tests d'intÃ©gration (20%)
â”‚   â””â”€â”€ e2e/           // Tests E2E (10%)
â”œâ”€â”€ __mocks__/         // Mocks globaux
â””â”€â”€ test-utils/        // Utilitaires de test
*/
```

## ðŸ”§ Configuration des Outils

### Jest Configuration
```typescript
// jest.config.js
const nextJest = require('next/jest')

const createJestConfig = nextJest({
  dir: './',
})

const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testEnvironment: 'jest-environment-jsdom',
  moduleNameMapping: {
    '^@/(.*)$': '<rootDir>/src/$1',
    '^@/components/(.*)$': '<rootDir>/src/components/$1',
    '^@/hooks/(.*)$': '<rootDir>/src/hooks/$1',
    '^@/stores/(.*)$': '<rootDir>/src/stores/$1',
    '^@/utils/(.*)$': '<rootDir>/src/utils/$1',
    '^@/types/(.*)$': '<rootDir>/src/types/$1',
  },
  testMatch: [
    '**/__tests__/**/*.(test|spec).(js|jsx|ts|tsx)',
    '**/*.(test|spec).(js|jsx|ts|tsx)'
  ],
  collectCoverageFrom: [
    'src/**/*.{js,jsx,ts,tsx}',
    '!src/**/*.d.ts',
    '!src/**/*.stories.{js,jsx,ts,tsx}',
    '!src/pages/_app.tsx',
    '!src/pages/_document.tsx',
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80,
    },
  },
  testTimeout: 10000,
}

module.exports = createJestConfig(customJestConfig)
```

### Jest Setup
```typescript
// jest.setup.js
import '@testing-library/jest-dom'
import { server } from './src/__mocks__/server'

// Mock Next.js router
jest.mock('next/router', () => ({
  useRouter: () => ({
    push: jest.fn(),
    replace: jest.fn(),
    prefetch: jest.fn(),
    back: jest.fn(),
    pathname: '/',
    query: {},
    asPath: '/',
  }),
}))

// Mock Next.js Image
jest.mock('next/image', () => ({
  __esModule: true,
  default: (props: any) => {
    // eslint-disable-next-line @next/next/no-img-element
    return <img {...props} />
  },
}))

// Mock Socket.IO
jest.mock('socket.io-client', () => ({
  io: jest.fn(() => ({
    on: jest.fn(),
    off: jest.fn(),
    emit: jest.fn(),
    connect: jest.fn(),
    disconnect: jest.fn(),
  })),
}))

// Mock Zustand stores
jest.mock('@/stores/userStore', () => ({
  useUserStore: jest.fn(),
}))

jest.mock('@/stores/chatStore', () => ({
  useChatStore: jest.fn(),
}))

// Setup MSW
beforeAll(() => server.listen())
afterEach(() => server.resetHandlers())
afterAll(() => server.close())

// Mock IntersectionObserver
global.IntersectionObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn(),
}))

// Mock ResizeObserver
global.ResizeObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn(),
}))
```

### Playwright Configuration
```typescript
// playwright.config.ts
import { defineConfig, devices } from '@playwright/test'

export default defineConfig({
  testDir: './src/__tests__/e2e',
  fullyParallel: true,
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : 0,
  workers: process.env.CI ? 1 : undefined,
  reporter: 'html',
  use: {
    baseURL: 'http://localhost:3000',
    trace: 'on-first-retry',
    screenshot: 'only-on-failure',
  },
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },
    {
      name: 'Mobile Chrome',
      use: { ...devices['Pixel 5'] },
    },
  ],
  webServer: {
    command: 'npm run dev',
    url: 'http://localhost:3000',
    reuseExistingServer: !process.env.CI,
  },
})
```

## ðŸ§© Tests Unitaires

### Utilitaires de Test
```typescript
// test-utils/render.tsx
import { ReactElement } from 'react'
import { render, RenderOptions } from '@testing-library/react'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ThemeProvider } from '@/contexts/ThemeContext'

interface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {
  queryClient?: QueryClient
  theme?: 'light' | 'dark'
}

const createWrapper = (options: CustomRenderOptions = {}) => {
  const { queryClient = new QueryClient({
    defaultOptions: {
      queries: { retry: false },
      mutations: { retry: false },
    },
  }), theme = 'light' } = options

  return function Wrapper({ children }: { children: React.ReactNode }) {
    return (
      <QueryClientProvider client={queryClient}>
        <ThemeProvider>
          {children}
        </ThemeProvider>
      </QueryClientProvider>
    )
  }
}

export const customRender = (
  ui: ReactElement,
  options: CustomRenderOptions = {}
) => {
  const { queryClient, theme, ...renderOptions } = options
  
  return render(ui, {
    wrapper: createWrapper({ queryClient, theme }),
    ...renderOptions,
  })
}

// Re-export everything
export * from '@testing-library/react'
export { customRender as render }
```

### Tests de Composants UI
```typescript
// __tests__/unit/components/ui/Button.test.tsx
import { render, screen, fireEvent } from '@/test-utils'
import { Button } from '@/components/ui/Button'

describe('Button Component', () => {
  it('renders with default props', () => {
    render(<Button>Click me</Button>)
    
    const button = screen.getByRole('button', { name: /click me/i })
    expect(button).toBeInTheDocument()
    expect(button).toHaveClass('bg-primary-500')
  })

  it('applies variant styles correctly', () => {
    render(<Button variant="destructive">Delete</Button>)
    
    const button = screen.getByRole('button', { name: /delete/i })
    expect(button).toHaveClass('bg-error-500')
  })

  it('handles click events', () => {
    const handleClick = jest.fn()
    render(<Button onClick={handleClick}>Click me</Button>)
    
    const button = screen.getByRole('button', { name: /click me/i })
    fireEvent.click(button)
    
    expect(handleClick).toHaveBeenCalledTimes(1)
  })

  it('is disabled when disabled prop is true', () => {
    render(<Button disabled>Disabled</Button>)
    
    const button = screen.getByRole('button', { name: /disabled/i })
    expect(button).toBeDisabled()
    expect(button).toHaveClass('opacity-50')
  })

  it('supports keyboard navigation', () => {
    const handleClick = jest.fn()
    render(<Button onClick={handleClick}>Press Enter</Button>)
    
    const button = screen.getByRole('button', { name: /press enter/i })
    button.focus()
    fireEvent.keyDown(button, { key: 'Enter', code: 'Enter' })
    
    expect(handleClick).toHaveBeenCalledTimes(1)
  })
})
```

### Tests de Composants Chat
```typescript
// __tests__/unit/components/chat/MessageBubble.test.tsx
import { render, screen } from '@/test-utils'
import { MessageBubble } from '@/components/chat/MessageBubble'
import { Message } from '@/types/chat'

const mockMessage: Message = {
  id: '1',
  content: 'Hello world!',
  messageType: 'TEXT',
  createdAt: new Date('2024-01-01T10:00:00Z'),
  sender: {
    id: '2',
    username: 'john_doe',
    avatar: '/avatar.jpg',
    isOnline: true,
  },
}

describe('MessageBubble Component', () => {
  it('renders text message correctly', () => {
    render(<MessageBubble message={mockMessage} isOwn={false} />)
    
    expect(screen.getByText('Hello world!')).toBeInTheDocument()
    expect(screen.getByText('john_doe')).toBeInTheDocument()
    expect(screen.getByText(/il y a/)).toBeInTheDocument() // Timestamp
  })

  it('applies correct styles for own messages', () => {
    render(<MessageBubble message={mockMessage} isOwn={true} />)
    
    const bubble = screen.getByText('Hello world!').closest('div')
    expect(bubble).toHaveClass('bg-chat-bubble-own', 'text-white')
  })

  it('applies correct styles for other messages', () => {
    render(<MessageBubble message={mockMessage} isOwn={false} />)
    
    const bubble = screen.getByText('Hello world!').closest('div')
    expect(bubble).toHaveClass('bg-chat-bubble-other', 'text-secondary-900')
  })

  it('shows avatar for other messages only', () => {
    const { rerender } = render(
      <MessageBubble message={mockMessage} isOwn={false} />
    )
    
    expect(screen.getByRole('img')).toBeInTheDocument()
    
    rerender(<MessageBubble message={mockMessage} isOwn={true} />)
    expect(screen.queryByRole('img')).not.toBeInTheDocument()
  })

  it('hides username for own messages', () => {
    const { rerender } = render(
      <MessageBubble message={mockMessage} isOwn={false} />
    )
    
    expect(screen.getByText('john_doe')).toBeInTheDocument()
    
    rerender(<MessageBubble message={mockMessage} isOwn={true} />)
    expect(screen.queryByText('john_doe')).not.toBeInTheDocument()
  })
})
```

### Tests de Hooks
```typescript
// __tests__/unit/hooks/useKeyboardNavigation.test.tsx
import { renderHook, act } from '@testing-library/react'
import { useKeyboardNavigation } from '@/hooks/useKeyboardNavigation'

describe('useKeyboardNavigation', () => {
  const items = ['item1', 'item2', 'item3']
  const mockOnSelect = jest.fn()

  beforeEach(() => {
    mockOnSelect.mockClear()
  })

  it('initializes with first item selected', () => {
    const { result } = renderHook(() =>
      useKeyboardNavigation(items, mockOnSelect, true)
    )

    expect(result.current.selectedIndex).toBe(0)
  })

  it('navigates down with ArrowDown', () => {
    const { result } = renderHook(() =>
      useKeyboardNavigation(items, mockOnSelect, true)
    )

    act(() => {
      const event = new KeyboardEvent('keydown', { key: 'ArrowDown' })
      document.dispatchEvent(event)
    })

    expect(result.current.selectedIndex).toBe(1)
  })

  it('wraps to first item when navigating down from last', () => {
    const { result } = renderHook(() =>
      useKeyboardNavigation(items, mockOnSelect, true)
    )

    // Navigate to last item
    act(() => {
      result.current.setSelectedIndex(2)
    })

    // Navigate down from last item
    act(() => {
      const event = new KeyboardEvent('keydown', { key: 'ArrowDown' })
      document.dispatchEvent(event)
    })

    expect(result.current.selectedIndex).toBe(0)
  })

  it('calls onSelect when Enter is pressed', () => {
    renderHook(() =>
      useKeyboardNavigation(items, mockOnSelect, true)
    )

    act(() => {
      const event = new KeyboardEvent('keydown', { key: 'Enter' })
      document.dispatchEvent(event)
    })

    expect(mockOnSelect).toHaveBeenCalledWith('item1')
  })

  it('ignores keyboard events when closed', () => {
    const { result } = renderHook(() =>
      useKeyboardNavigation(items, mockOnSelect, false)
    )

    act(() => {
      const event = new KeyboardEvent('keydown', { key: 'ArrowDown' })
      document.dispatchEvent(event)
    })

    expect(result.current.selectedIndex).toBe(0) // Should not change
  })
})
```

### Tests de Stores Zustand
```typescript
// __tests__/unit/stores/userStore.test.ts
import { renderHook, act } from '@testing-library/react'
import { useUserStore } from '@/stores/userStore'

// Mock du store pour les tests
const mockStore = {
  user: null,
  isAuthenticated: false,
  isLoading: false,
  login: jest.fn(),
  logout: jest.fn(),
  updateProfile: jest.fn(),
}

jest.mock('@/stores/userStore', () => ({
  useUserStore: jest.fn(() => mockStore),
}))

describe('UserStore', () => {
  beforeEach(() => {
    jest.clearAllMocks()
    mockStore.user = null
    mockStore.isAuthenticated = false
    mockStore.isLoading = false
  })

  it('initializes with default state', () => {
    const { result } = renderHook(() => useUserStore())

    expect(result.current.user).toBeNull()
    expect(result.current.isAuthenticated).toBe(false)
    expect(result.current.isLoading).toBe(false)
  })

  it('updates state after successful login', async () => {
    const mockUser = {
      id: '1',
      username: 'testuser',
      email: 'test@example.com',
    }

    mockStore.login.mockResolvedValue(mockUser)
    mockStore.user = mockUser
    mockStore.isAuthenticated = true

    const { result } = renderHook(() => useUserStore())

    await act(async () => {
      await result.current.login('test@example.com', 'password')
    })

    expect(mockStore.login).toHaveBeenCalledWith('test@example.com', 'password')
    expect(result.current.user).toEqual(mockUser)
    expect(result.current.isAuthenticated).toBe(true)
  })

  it('clears state after logout', async () => {
    mockStore.user = null
    mockStore.isAuthenticated = false

    const { result } = renderHook(() => useUserStore())

    await act(async () => {
      await result.current.logout()
    })

    expect(mockStore.logout).toHaveBeenCalled()
    expect(result.current.user).toBeNull()
    expect(result.current.isAuthenticated).toBe(false)
  })
})
```

## ðŸ”— Tests d'IntÃ©gration

### Mock Service Worker (MSW)
```typescript
// __mocks__/server.ts
import { setupServer } from 'msw/node'
import { rest } from 'msw'

const handlers = [
  // Auth endpoints
  rest.post('/api/auth/login', (req, res, ctx) => {
    return res(
      ctx.status(200),
      ctx.json({
        user: {
          id: '1',
          username: 'testuser',
          email: 'test@example.com',
        },
        token: 'mock-jwt-token',
      })
    )
  }),

  rest.post('/api/auth/logout', (req, res, ctx) => {
    return res(ctx.status(200))
  }),

  // Conversations endpoints
  rest.get('/api/conversations', (req, res, ctx) => {
    return res(
      ctx.status(200),
      ctx.json([
        {
          id: '1',
          participants: [
            { id: '1', username: 'user1' },
            { id: '2', username: 'user2' },
          ],
          lastMessage: {
            id: '1',
            content: 'Hello!',
            createdAt: new Date().toISOString(),
          },
        },
      ])
    )
  }),

  // Messages endpoints
  rest.get('/api/conversations/:id/messages', (req, res, ctx) => {
    const { id } = req.params
    return res(
      ctx.status(200),
      ctx.json([
        {
          id: '1',
          content: 'Hello!',
          messageType: 'TEXT',
          senderId: '1',
          conversationId: id,
          createdAt: new Date().toISOString(),
        },
      ])
    )
  }),

  rest.post('/api/conversations/:id/messages', (req, res, ctx) => {
    return res(
      ctx.status(201),
      ctx.json({
        id: '2',
        content: 'New message',
        messageType: 'TEXT',
        senderId: '1',
        conversationId: req.params.id,
        createdAt: new Date().toISOString(),
      })
    )
  }),
]

export const server = setupServer(...handlers)
```

### Tests d'IntÃ©gration Chat
```typescript
// __tests__/integration/chat/ChatFlow.test.tsx
import { render, screen, fireEvent, waitFor } from '@/test-utils'
import { ChatPage } from '@/app/conversations/[id]/page'
import { server } from '@/__mocks__/server'
import { rest } from 'msw'

// Mock du router Next.js
const mockPush = jest.fn()
jest.mock('next/navigation', () => ({
  useRouter: () => ({
    push: mockPush,
  }),
  useParams: () => ({
    id: '1',
  }),
}))

describe('Chat Flow Integration', () => {
  beforeEach(() => {
    mockPush.mockClear()
  })

  it('loads and displays conversation messages', async () => {
    render(<ChatPage />)

    // VÃ©rifier le chargement
    expect(screen.getByText(/chargement/i)).toBeInTheDocument()

    // Attendre que les messages se chargent
    await waitFor(() => {
      expect(screen.getByText('Hello!')).toBeInTheDocument()
    })

    // VÃ©rifier que le loader a disparu
    expect(screen.queryByText(/chargement/i)).not.toBeInTheDocument()
  })

  it('sends a new message successfully', async () => {
    render(<ChatPage />)

    // Attendre que la page se charge
    await waitFor(() => {
      expect(screen.getByText('Hello!')).toBeInTheDocument()
    })

    // Trouver l'input de message
    const messageInput = screen.getByPlaceholderText(/tapez votre message/i)
    const sendButton = screen.getByRole('button', { name: /envoyer/i })

    // Taper un message
    fireEvent.change(messageInput, { target: { value: 'New message' } })
    fireEvent.click(sendButton)

    // VÃ©rifier que le message apparaÃ®t
    await waitFor(() => {
      expect(screen.getByText('New message')).toBeInTheDocument()
    })

    // VÃ©rifier que l'input est vidÃ©
    expect(messageInput).toHaveValue('')
  })

  it('handles message sending error gracefully', async () => {
    // Mock d'une erreur serveur
    server.use(
      rest.post('/api/conversations/:id/messages', (req, res, ctx) => {
        return res(ctx.status(500), ctx.json({ error: 'Server error' }))
      })
    )

    render(<ChatPage />)

    await waitFor(() => {
      expect(screen.getByText('Hello!')).toBeInTheDocument()
    })

    const messageInput = screen.getByPlaceholderText(/tapez votre message/i)
    const sendButton = screen.getByRole('button', { name: /envoyer/i })

    fireEvent.change(messageInput, { target: { value: 'Failed message' } })
    fireEvent.click(sendButton)

    // VÃ©rifier qu'un message d'erreur apparaÃ®t
    await waitFor(() => {
      expect(screen.getByText(/erreur lors de l'envoi/i)).toBeInTheDocument()
    })
  })

  it('displays typing indicator when someone is typing', async () => {
    // Mock du socket pour simuler la frappe
    const mockSocket = {
      on: jest.fn(),
      emit: jest.fn(),
      off: jest.fn(),
    }

    jest.doMock('socket.io-client', () => ({
      io: () => mockSocket,
    }))

    render(<ChatPage />)

    await waitFor(() => {
      expect(screen.getByText('Hello!')).toBeInTheDocument()
    })

    // Simuler l'Ã©vÃ©nement de frappe
    const typingHandler = mockSocket.on.mock.calls.find(
      call => call[0] === 'user:typing'
    )?.[1]

    if (typingHandler) {
      typingHandler({
        userId: '2',
        username: 'user2',
        isTyping: true,
      })
    }

    // VÃ©rifier que l'indicateur de frappe apparaÃ®t
    await waitFor(() => {
      expect(screen.getByText(/user2 Ã©crit/i)).toBeInTheDocument()
    })
  })
})
```

### Tests d'IntÃ©gration Auth
```typescript
// __tests__/integration/auth/AuthFlow.test.tsx
import { render, screen, fireEvent, waitFor } from '@/test-utils'
import { LoginPage } from '@/app/login/page'
import { server } from '@/__mocks__/server'
import { rest } from 'msw'

describe('Authentication Flow', () => {
  it('logs in user successfully', async () => {
    render(<LoginPage />)

    // Remplir le formulaire
    const emailInput = screen.getByLabelText(/email/i)
    const passwordInput = screen.getByLabelText(/mot de passe/i)
    const submitButton = screen.getByRole('button', { name: /se connecter/i })

    fireEvent.change(emailInput, { target: { value: 'test@example.com' } })
    fireEvent.change(passwordInput, { target: { value: 'password123' } })
    fireEvent.click(submitButton)

    // VÃ©rifier la redirection
    await waitFor(() => {
      expect(mockPush).toHaveBeenCalledWith('/hub')
    })
  })

  it('shows error for invalid credentials', async () => {
    // Mock d'une erreur d'authentification
    server.use(
      rest.post('/api/auth/login', (req, res, ctx) => {
        return res(
          ctx.status(401),
          ctx.json({ error: 'Invalid credentials' })
        )
      })
    )

    render(<LoginPage />)

    const emailInput = screen.getByLabelText(/email/i)
    const passwordInput = screen.getByLabelText(/mot de passe/i)
    const submitButton = screen.getByRole('button', { name: /se connecter/i })

    fireEvent.change(emailInput, { target: { value: 'wrong@example.com' } })
    fireEvent.change(passwordInput, { target: { value: 'wrongpassword' } })
    fireEvent.click(submitButton)

    // VÃ©rifier le message d'erreur
    await waitFor(() => {
      expect(screen.getByText(/identifiants invalides/i)).toBeInTheDocument()
    })
  })
})
```

## ðŸŽ­ Tests End-to-End (E2E)

### Tests E2E Chat Complet
```typescript
// __tests__/e2e/chat.spec.ts
import { test, expect } from '@playwright/test'

test.describe('Chat Application', () => {
  test.beforeEach(async ({ page }) => {
    // Login avant chaque test
    await page.goto('/login')
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.fill('[data-testid="password-input"]', 'password123')
    await page.click('[data-testid="login-button"]')
    await page.waitForURL('/hub')
  })

  test('should send and receive messages', async ({ page, context }) => {
    // Ouvrir une conversation
    await page.click('[data-testid="conversation-1"]')
    await page.waitForURL('/conversations/1')

    // VÃ©rifier que la conversation se charge
    await expect(page.locator('[data-testid="chat-messages"]')).toBeVisible()

    // Envoyer un message
    const messageInput = page.locator('[data-testid="message-input"]')
    await messageInput.fill('Hello from E2E test!')
    await page.click('[data-testid="send-button"]')

    // VÃ©rifier que le message apparaÃ®t
    await expect(page.locator('text=Hello from E2E test!')).toBeVisible()

    // VÃ©rifier que l'input est vidÃ©
    await expect(messageInput).toHaveValue('')
  })

  test('should show typing indicator', async ({ page, context }) => {
    // Ouvrir deux onglets pour simuler deux utilisateurs
    const page2 = await context.newPage()
    
    // Login sur le deuxiÃ¨me onglet
    await page2.goto('/login')
    await page2.fill('[data-testid="email-input"]', 'user2@example.com')
    await page2.fill('[data-testid="password-input"]', 'password123')
    await page2.click('[data-testid="login-button"]')
    await page2.waitForURL('/hub')

    // Ouvrir la mÃªme conversation sur les deux onglets
    await page.click('[data-testid="conversation-1"]')
    await page2.click('[data-testid="conversation-1"]')

    // Commencer Ã  taper sur le deuxiÃ¨me onglet
    await page2.locator('[data-testid="message-input"]').fill('Typing...')

    // VÃ©rifier que l'indicateur de frappe apparaÃ®t sur le premier onglet
    await expect(page.locator('[data-testid="typing-indicator"]')).toBeVisible()
    await expect(page.locator('text=user2 Ã©crit')).toBeVisible()

    // ArrÃªter de taper
    await page2.locator('[data-testid="message-input"]').clear()

    // VÃ©rifier que l'indicateur disparaÃ®t
    await expect(page.locator('[data-testid="typing-indicator"]')).not.toBeVisible()
  })

  test('should handle offline/online status', async ({ page, context }) => {
    await page.goto('/hub')

    // VÃ©rifier le statut en ligne initial
    await expect(page.locator('[data-testid="user-status-online"]')).toBeVisible()

    // Simuler la perte de connexion
    await context.setOffline(true)

    // VÃ©rifier le changement de statut
    await expect(page.locator('[data-testid="user-status-offline"]')).toBeVisible()

    // Restaurer la connexion
    await context.setOffline(false)

    // VÃ©rifier le retour en ligne
    await expect(page.locator('[data-testid="user-status-online"]')).toBeVisible()
  })

  test('should navigate between conversations', async ({ page }) => {
    await page.goto('/hub')

    // Cliquer sur la premiÃ¨re conversation
    await page.click('[data-testid="conversation-1"]')
    await page.waitForURL('/conversations/1')
    await expect(page.locator('[data-testid="conversation-header"]')).toContainText('Conversation 1')

    // Retourner au hub
    await page.click('[data-testid="back-to-hub"]')
    await page.waitForURL('/hub')

    // Cliquer sur une autre conversation
    await page.click('[data-testid="conversation-2"]')
    await page.waitForURL('/conversations/2')
    await expect(page.locator('[data-testid="conversation-header"]')).toContainText('Conversation 2')
  })

  test('should work on mobile viewport', async ({ page }) => {
    // DÃ©finir la taille mobile
    await page.setViewportSize({ width: 375, height: 667 })
    
    await page.goto('/hub')

    // VÃ©rifier que la sidebar est cachÃ©e sur mobile
    await expect(page.locator('[data-testid="sidebar"]')).not.toBeVisible()

    // Ouvrir une conversation
    await page.click('[data-testid="conversation-1"]')
    await page.waitForURL('/conversations/1')

    // VÃ©rifier que le chat prend toute la largeur
    const chatContainer = page.locator('[data-testid="chat-container"]')
    await expect(chatContainer).toBeVisible()

    // Tester l'envoi de message sur mobile
    await page.fill('[data-testid="message-input"]', 'Mobile message')
    await page.click('[data-testid="send-button"]')
    await expect(page.locator('text=Mobile message')).toBeVisible()
  })
})
```

### Tests E2E Icebreakers
```typescript
// __tests__/e2e/icebreakers.spec.ts
import { test, expect } from '@playwright/test'

test.describe('Icebreakers Feature', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/login')
    await page.fill('[data-testid="email-input"]', 'test@example.com')
    await page.fill('[data-testid="password-input"]', 'password123')
    await page.click('[data-testid="login-button"]')
    await page.waitForURL('/hub')
  })

  test('should complete icebreaker flow', async ({ page }) => {
    // Aller Ã  la page icebreaker
    await page.goto('/icebreaker')

    // VÃ©rifier que la question apparaÃ®t
    await expect(page.locator('[data-testid="icebreaker-question"]')).toBeVisible()

    // SÃ©lectionner une rÃ©ponse
    await page.click('[data-testid="answer-option-1"]')

    // Cliquer sur suivant
    await page.click('[data-testid="next-button"]')

    // VÃ©rifier la progression
    await expect(page.locator('[data-testid="progress-bar"]')).toBeVisible()

    // ComplÃ©ter toutes les questions (boucle)
    for (let i = 0; i < 5; i++) {
      await page.click('[data-testid="answer-option-1"]')
      await page.click('[data-testid="next-button"]')
    }

    // VÃ©rifier la redirection vers le hub
    await page.waitForURL('/hub')
    await expect(page.locator('[data-testid="icebreaker-complete"]')).toBeVisible()
  })

  test('should allow skipping questions', async ({ page }) => {
    await page.goto('/icebreaker')

    // Cliquer sur passer
    await page.click('[data-testid="skip-button"]')

    // VÃ©rifier que la question suivante apparaÃ®t
    await expect(page.locator('[data-testid="icebreaker-question"]')).toBeVisible()
  })
})
```

## ðŸ“Š MÃ©triques et Couverture

### Scripts de Test
```json
// package.json
{
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:integration": "jest --testPathPattern=integration",
    "test:e2e": "playwright test",
    "test:e2e:ui": "playwright test --ui",
    "test:all": "npm run test:coverage && npm run test:e2e"
  }
}
```

### Configuration de Couverture
```typescript
// jest.config.js (extrait)
module.exports = {
  collectCoverageFrom: [
    'src/**/*.{js,jsx,ts,tsx}',
    '!src/**/*.d.ts',
    '!src/**/*.stories.{js,jsx,ts,tsx}',
    '!src/pages/_app.tsx',
    '!src/pages/_document.tsx',
    '!src/__tests__/**',
    '!src/__mocks__/**',
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80,
    },
    // Seuils spÃ©cifiques par dossier
    './src/components/': {
      branches: 90,
      functions: 90,
      lines: 90,
      statements: 90,
    },
    './src/hooks/': {
      branches: 85,
      functions: 85,
      lines: 85,
      statements: 85,
    },
  },
  coverageReporters: ['text', 'lcov', 'html'],
}
```

## ðŸ“‹ Checklist Testing

### âœ… **Tests Unitaires :**
- [ ] Composants UI (Button, Avatar, MessageBubble)
- [ ] Hooks personnalisÃ©s (useKeyboardNavigation, useSocket)
- [ ] Stores Zustand (UserStore, ChatStore)
- [ ] Utilitaires et helpers
- [ ] Couverture > 80%

### âœ… **Tests d'IntÃ©gration :**
- [ ] Flux d'authentification complet
- [ ] Envoi/rÃ©ception de messages
- [ ] Gestion des erreurs API
- [ ] WebSocket events
- [ ] Navigation entre pages

### âœ… **Tests E2E :**
- [ ] Parcours utilisateur complet
- [ ] Chat en temps rÃ©el
- [ ] Icebreakers flow
- [ ] Responsive design
- [ ] Performance (Core Web Vitals)

### âœ… **Configuration :**
- [ ] Jest configurÃ© avec Next.js
- [ ] React Testing Library setup
- [ ] Playwright configurÃ©
- [ ] MSW pour les mocks API
- [ ] CI/CD pipeline avec tests

### âœ… **Bonnes Pratiques :**
- [ ] Tests nommÃ©s clairement
- [ ] Arrange-Act-Assert pattern
- [ ] Mocks appropriÃ©s
- [ ] Tests isolÃ©s et dÃ©terministes
- [ ] Documentation des cas de test

Cette architecture de test garantit la fiabilitÃ© et la qualitÃ© de JootsHub ! ðŸ§ª 