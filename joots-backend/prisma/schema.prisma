// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  LISTENER
}

enum LocaleCode {
  fr_FR      
  en_US    
}




model Auth {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
}





model User {
  id                  String                    @id @default(cuid())
  avatar              String?
  bio                 String?
  languages           String[]                  @default(["fr_FR"])
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @default(now()) @updatedAt
  auth                Auth?
  userNumber          Int                       @unique @default(autoincrement())
  username            String                    @unique
  role                UserRole                  @default(USER)
  isOnline            Boolean                   @default(false)
  isAvailableForChat  Boolean                   @default(true)
  questionGroups      QuestionGroup[]
  sentMessages        Message[]                 @relation("SentMessages")
  conversations       ConversationParticipant[]
  contacts            UserContact[]             @relation("UserContacts")
  contactOf           UserContact[]             @relation("ContactOf")
  questionPreferences UserQuestionPreference[]
  answers             UserAnswer[]
}

model UserContact {
  userId    String
  contactId String
  createdAt DateTime @default(now())

  // Relations
  user    User @relation("UserContacts", fields: [userId], references: [id], onDelete: Cascade)
  contact User @relation("ContactOf", fields: [contactId], references: [id], onDelete: Cascade)

  // Contrainte de clé primaire composite
  @@id([userId, contactId])
  // Indexation pour améliorer les performances
  @@index([userId])
  @@index([contactId])
}

model Conversation {
  id           String                    @id @default(uuid())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  messages     Message[]
  level        Int                       @default(1)
  ProgressPoint Int                     @default(0)
  locale      LocaleCode @default(fr_FR)
  participants ConversationParticipant[]
  UserAnswer   UserAnswer[]
}

model ConversationParticipant {
  conversationId    String
  userId            String
  conversation      Conversation @relation(fields: [conversationId], references: [id])
  user              User         @relation(fields: [userId], references: [id])
  isIcebreakerReady Boolean      @default(false)
  hasGivenAnswer    Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@id([conversationId, userId])
  @@unique([conversationId, userId])
}


enum MessageType {
  TEXT      // messages classiques
  ANSWER    // carte de réponse des deux utilisateurs à une question
}

model Message {
  id             String       @id @default(uuid())
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
  editedAt       DateTime?
  isRead         Boolean      @default(false)
  isDeleted      Boolean      @default(false)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  messageType    MessageType @default(TEXT)
  userAId        String?
  userAAnswer    String?
  userBId        String?
  userBAnswer    String?


  @@index([conversationId])
  @@index([senderId])
  @@index([messageType])
}

model QuestionGroup {
  id          String    @id @default(uuid())
  type        Int // 1: Oui/Non/IDK, 2: QCM, 3: Échelle
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  createdAt   DateTime  @default(now())
  isModerated Boolean   @default(false)
  moderatedAt DateTime?
  pinned      Boolean   @default(false)
  enabled     Boolean   @default(true)

  questions  Question[]
  options    QuestionOption[]
  categories QuestionGroupCategory[]
  answers    UserAnswer[]
}

model Question {
  id       String @id @default(uuid())
  groupId  String
  locale   LocaleCode @default(fr_FR)
  question String

  group QuestionGroup @relation(fields: [groupId], references: [id])

  @@unique([groupId, locale])
}

model QuestionOption {
  id      String       @id @default(uuid())
  groupId String
  locale  LocaleCode @default(fr_FR)
  label   String
  order   Int
  answers UserAnswer[]

  group QuestionGroup @relation(fields: [groupId], references: [id])

  @@unique([groupId, locale, order])
}

model Category {
  id              Int                      @id
  translations    CategoryTranslation[]
  groupLinks      QuestionGroupCategory[]
  userPreferences UserQuestionPreference[]
}

model CategoryTranslation {
  categoryId Int
  locale     LocaleCode @default(fr_FR)
  label      String

  category Category @relation(fields: [categoryId], references: [id])

  @@id([categoryId, locale])
}

model QuestionGroupCategory {
  questionGroupId String
  categoryId      Int

  questionGroup QuestionGroup @relation(fields: [questionGroupId], references: [id])
  category      Category      @relation(fields: [categoryId], references: [id])

  @@id([questionGroupId, categoryId])
}

model UserQuestionPreference {
  userId     String
  categoryId Int
  enabled    Boolean  @default(true)
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([userId, categoryId])
  @@index([categoryId])
}

model UserAnswer {
  id               String   @id @default(uuid())
  userId           String
  questionGroupId  String
  questionOptionId String
  conversationId   String? // contexte conversationnel
  answeredAt       DateTime @default(now())
  updatedAt        DateTime @updatedAt
  note             String? // remarque libre
  isFlagged        Boolean  @default(false)

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionGroup  QuestionGroup  @relation(fields: [questionGroupId], references: [id], onDelete: Cascade)
  questionOption QuestionOption @relation(fields: [questionOptionId], references: [id], onDelete: Cascade)
  conversation   Conversation?  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionGroupId])
  @@index([conversationId])
}
