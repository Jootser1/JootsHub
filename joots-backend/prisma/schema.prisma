generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id                     String                    @id @default(cuid())
  createdAt              DateTime                  @default(now())
  username               String                    @unique
  userNumber             Int                       @unique @default(autoincrement())
  avatar                 String?
  isOnline               Boolean                   @default(false)
  updatedAt              DateTime                  @default(now()) @updatedAt
  role                   UserRole                  @default(USER)
  auth                   Auth?
  conversations          ConversationParticipant[]
  sentMessages           Message[]                 @relation("SentMessages")
  questionGroups         QuestionGroup[]
  answers                UserAnswer[]
  contactOf              UserContact[]             @relation("ContactOf")
  contacts               UserContact[]             @relation("UserContacts")
  UserAttribute          UserAttribute[]
  UserSettings           UserSettings?
  UserQuestionPreference UserQuestionPreference[]
}

model UserAttribute {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  key           AttributeKey
  value         String
  levelRevealed Int

  @@unique([userId, key])
  @@index([userId])
}

model UserSettings {
  id                            String                   @id @default(cuid())
  userId                        String                   @unique
  user                          User                     @relation(fields: [userId], references: [id])
  Applanguage                   String                   @default("fr_FR")
  questionPreferences           UserQuestionPreference[]
  acceptedLanguages             String[]                 @default(["fr_FR"])
  isAvailableForChat            Boolean                  @default(true)
  allowInvitationsFromStrangers Boolean                  @default(true)
}

model UserContact {
  userId    String
  contactId String
  createdAt DateTime @default(now())
  contact   User     @relation("ContactOf", fields: [contactId], references: [id], onDelete: Cascade)
  user      User     @relation("UserContacts", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, contactId])
  @@index([userId])
  @@index([contactId])
}

model Conversation {
  id           String                    @id @default(uuid())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  locale       LocaleCode                @default(fr_FR)
  xpPoint      Int                       @default(0)
  difficulty   Difficulty                @default(INTERMEDIATE)
  participants ConversationParticipant[]
  messages     Message[]
  UserAnswer   UserAnswer[]
}

model ConversationParticipant {
  conversationId    String
  userId            String
  createdAt         DateTime     @default(now())
  hasGivenAnswer    Boolean      @default(false)
  isIcebreakerReady Boolean      @default(false)
  updatedAt         DateTime     @updatedAt
  conversation      Conversation @relation(fields: [conversationId], references: [id])
  user              User         @relation(fields: [userId], references: [id])

  @@id([conversationId, userId])
  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(uuid())
  senderId       String?
  content        String
  createdAt      DateTime     @default(now())
  conversationId String
  isRead         Boolean      @default(false)
  editedAt       DateTime?
  isDeleted      Boolean      @default(false)
  messageType    MessageType  @default(TEXT)
  userAAnswer    String?
  userAId        String?
  userBAnswer    String?
  userBId        String?
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User?        @relation("SentMessages", fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@index([messageType])
}

model QuestionGroup {
  id          String                  @id @default(uuid())
  type        Int
  createdAt   DateTime                @default(now())
  isModerated Boolean                 @default(false)
  moderatedAt DateTime?
  pinned      Boolean                 @default(false)
  enabled     Boolean                 @default(true)
  authorId    String
  questions   Question[]
  author      User                    @relation(fields: [authorId], references: [id])
  categories  QuestionGroupCategory[]
  options     QuestionOption[]
  answers     UserAnswer[]
}

model Question {
  id       String        @id @default(uuid())
  groupId  String
  question String
  locale   LocaleCode    @default(fr_FR)
  group    QuestionGroup @relation(fields: [groupId], references: [id])

  @@unique([groupId, locale])
}

model QuestionOption {
  id      String        @id @default(uuid())
  groupId String
  label   String
  order   Int
  locale  LocaleCode    @default(fr_FR)
  group   QuestionGroup @relation(fields: [groupId], references: [id])
  answers UserAnswer[]

  @@unique([groupId, locale, order])
}

model Category {
  id              Int                      @id
  translations    CategoryTranslation[]
  groupLinks      QuestionGroupCategory[]
  userPreferences UserQuestionPreference[]
}

model CategoryTranslation {
  categoryId Int
  label      String
  locale     LocaleCode @default(fr_FR)
  category   Category   @relation(fields: [categoryId], references: [id])

  @@id([categoryId, locale])
}

model QuestionGroupCategory {
  questionGroupId String
  categoryId      Int
  category        Category      @relation(fields: [categoryId], references: [id])
  questionGroup   QuestionGroup @relation(fields: [questionGroupId], references: [id])

  @@id([questionGroupId, categoryId])
}

model UserQuestionPreference {
  userId         String
  categoryId     Int
  Opinion        Opinion       @default(NEUTRAL)
  updatedAt      DateTime      @updatedAt
  category       Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserSettings   UserSettings? @relation(fields: [userSettingsId], references: [id])
  userSettingsId String?

  @@id([userId, categoryId])
  @@index([categoryId])
}

model UserAnswer {
  id               String         @id @default(uuid())
  userId           String
  questionGroupId  String
  questionOptionId String
  conversationId   String?
  answeredAt       DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  note             String?
  isFlagged        Boolean        @default(false)
  conversation     Conversation?  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  questionGroup    QuestionGroup  @relation(fields: [questionGroupId], references: [id], onDelete: Cascade)
  questionOption   QuestionOption @relation(fields: [questionOptionId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionGroupId])
  @@index([conversationId])
}

enum UserRole {
  USER
  LISTENER
}

enum LocaleCode {
  fr_FR
  en_US
}

enum MessageType {
  TEXT
  ANSWER
}

enum Difficulty {
  EASY
  INTERMEDIATE
  HARDCORE
}

enum Opinion {
  DISLIKE
  NEUTRAL
  LIKE
}

enum AttributeKey {
  CITY
  AGE
  GENDER
  JOB
  ORIGIN
  ORIENTATION
  PASSIONS
  QUALITY
  FLAW
  BIO
}
