// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
}

model User {
  id        String   @id @default(cuid())
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  auth      Auth?
  userNumber  Int       @unique @default(autoincrement())
  username  String    @unique
  isOnline  Boolean     @default(false)
  isAvailableForChat Boolean @default(true)
  questionGroups QuestionGroup[]
  sentMessages     Message[] @relation("SentMessages")
  conversations    ConversationParticipant[]
  contacts      UserContact[] @relation("UserContacts")
  contactOf     UserContact[] @relation("ContactOf")
}

model UserContact {
  userId      String
  contactId   String
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation("UserContacts", fields: [userId], references: [id], onDelete: Cascade)
  contact     User     @relation("ContactOf", fields: [contactId], references: [id], onDelete: Cascade)
  
  // Contrainte de clé primaire composite
  @@id([userId, contactId])
  // Indexation pour améliorer les performances
  @@index([userId])
  @@index([contactId])
}

model Conversation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  conversationId String
  userId        String
  conversation  Conversation @relation(fields: [conversationId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  isIcebreakerReady   Boolean  @default(false)
  hasGivenAnswer      Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@id([conversationId, userId])
  @@unique([conversationId, userId])
}

model Message {
  id        String   @id @default(uuid())
  senderId  String
  content   String
  createdAt DateTime @default(now())
  editedAt  DateTime?
  isRead    Boolean  @default(false)
  isDeleted Boolean @default(false)
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
}

model QuestionGroup {
  id           String                   @id @default(uuid())
  type         Int                      // 1: Oui/Non/IDK, 2: QCM, 3: Échelle
  authorId     String
  author       User @relation(fields: [authorId], references: [id])
  createdAt    DateTime                 @default(now())
  isModerated  Boolean                  @default(false)
  moderatedAt  DateTime?
  pinned       Boolean                  @default(false)
  enabled      Boolean                  @default(true)

  questions    Question[]
  options      QuestionOption[]
  categories   QuestionGroupCategory[]
}

model Question {
  id        String         @id @default(uuid())
  groupId   String
  locale    String         // 'fr_FR', 'en_US', etc.
  question  String

  group     QuestionGroup  @relation(fields: [groupId], references: [id])

  @@unique([groupId, locale])
}

model QuestionOption {
  id       String          @id @default(uuid())
  groupId  String
  locale   String
  label    String
  order    Int

  group    QuestionGroup   @relation(fields: [groupId], references: [id])

  @@unique([groupId, locale, order])
}

model Category {
  id              Int                       @id
  translations    CategoryTranslation[]
  groupLinks      QuestionGroupCategory[]
}

model CategoryTranslation {
  categoryId  Int
  locale      String
  label       String

  category    Category   @relation(fields: [categoryId], references: [id])

  @@id([categoryId, locale])
}

model QuestionGroupCategory {
  questionGroupId String
  categoryId      Int

  questionGroup   QuestionGroup @relation(fields: [questionGroupId], references: [id])
  category        Category      @relation(fields: [categoryId], references: [id])

  @@id([questionGroupId, categoryId])
}




