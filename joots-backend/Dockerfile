# üõ†Ô∏è √âtape 1 : Build
FROM node:20-alpine AS builder

# √âtape 1 ‚Äî Copier et compiler les types partag√©s
WORKDIR /packages
COPY ./packages .

# Build des types partag√©s
WORKDIR /packages/types
RUN npm install --verbose && npm run build && ls -la dist/

# √âtape 2 ‚Äî Installer les d√©pendances du backend
WORKDIR /joots-backend

# Copier les fichiers de package en premier pour optimiser le cache Docker
COPY joots-backend/package*.json ./
RUN npm ci

# √âtape 3 : Copier le sch√©ma et g√©n√©rer le client Prisma
COPY ./joots-backend/prisma ./prisma
RUN npx prisma generate --schema=./prisma/schema.prisma

# Copier les fichiers de configuration et source
COPY joots-backend/tsconfig*.json ./
COPY joots-backend/src ./src

# Compiler le projet
RUN npm run build

# üîß √âtape 2 : Cr√©ation de l'image de prod minimale
FROM node:20-alpine AS runner

WORKDIR /joots-backend

# Copier les types partag√©s compil√©s
COPY --from=builder /packages/types/dist ./node_modules/@shared/types/dist

# Copier le build, les d√©pendances et les fichiers n√©cessaires
COPY --from=builder /joots-backend/dist ./dist
COPY --from=builder /joots-backend/node_modules ./node_modules
COPY --from=builder /joots-backend/package.json ./package.json
COPY --from=builder /joots-backend/prisma ./prisma


# Commande de d√©marrage avec gestion d'erreur am√©lior√©e
CMD ["sh", "-c", "npx prisma migrate deploy && ([ \"$SEED_DB\" = \"true\" ] && npx prisma db seed || true) && node dist/main.js"]

