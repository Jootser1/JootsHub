#!/usr/bin/env node

const fs = require('fs')
const path = require('path')

console.log('üîß Correction des propri√©t√©s calcul√©es...\n')

// Fichiers avec des erreurs de propri√©t√©s calcul√©es
const FILES_TO_FIX = [
  'joots-frontend/src/features/chat/stores/chatStore.ts',
  'joots-frontend/src/features/contacts/stores/contactStore.ts',
  'joots-frontend/src/features/chat/sockets/ChatSocketProvider.tsx',
  'joots-frontend/src/features/user/sockets/GlobalUserSocketProvider.tsx',
  'joots-frontend/src/hooks/useSocketManager.ts'
]

/**
 * Corrige les propri√©t√©s calcul√©es dans un fichier
 */
function fixComputedProperties(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8')
    const originalContent = content

    // Corriger les propri√©t√©s calcul√©es avec semicolon incorrect
    content = content.replace(/;(\[[\w\s\.\[\]]+\]):/g, '$1:')
    
    // Corriger les tableaux de d√©pendances avec semicolon incorrect
    content = content.replace(/,\s*;(\[\])/g, ',\n    $1')
    content = content.replace(/,\s*;(\[[\w\s,\[\]]+\])/g, ',\n    $1')

    if (content !== originalContent) {
      fs.writeFileSync(filePath, content, 'utf8')
      console.log(`‚úÖ Corrig√©: ${filePath}`)
      return true
    }

    return false
  } catch (error) {
    console.error(`‚ùå Erreur lors de la correction de ${filePath}:`, error.message)
    return false
  }
}

/**
 * Fonction principale
 */
function main() {
  console.log(`üìÅ Correction des propri√©t√©s calcul√©es\n`)

  let fixedFiles = 0

  // Traiter chaque fichier
  FILES_TO_FIX.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      const wasFixed = fixComputedProperties(filePath)
      if (wasFixed) {
        fixedFiles++
      }
    } else {
      console.log(`‚ö†Ô∏è  Fichier non trouv√©: ${filePath}`)
    }
  })

  console.log('\nüìà R√©sum√©:')
  console.log(`‚úÖ ${fixedFiles} fichiers corrig√©s`)
  console.log('\nüéâ Correction des propri√©t√©s calcul√©es termin√©e !')
}

// Ex√©cuter le script
if (require.main === module) {
  main()
} 