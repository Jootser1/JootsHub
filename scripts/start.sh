#!/bin/bash

# üöÄ D√©marrage JootsHub - Mode HTTPS
# Script de d√©marrage simplifi√© pour tous les environnements

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions d'affichage
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

echo "üöÄ D√©marrage JootsHub HTTPS"
echo "=========================="

# D√©tecter le mode (par d√©faut: d√©veloppement)
MODE=${1:-dev}
COMPOSE_FILES=""

case $MODE in
    "prod")
        COMPOSE_FILES="-f docker-compose.prod.yml"
        log_info "Mode: Production"
        ;;
    "dev"|*)
        COMPOSE_FILES="-f docker-compose.yml -f docker-compose.override.yml"
        log_info "Mode: D√©veloppement"
        ;;
esac

# 1. V√©rifications des pr√©requis
log_info "V√©rification des pr√©requis..."

# Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker n'est pas install√©"
    exit 1
fi

if ! command -v docker &> /dev/null || ! docker compose version &> /dev/null; then
    log_error "Docker Compose n'est pas install√©"
    exit 1
fi

# 2. V√©rification de la configuration
log_info "V√©rification de la configuration..."

# Certificats SSL
missing_certs=()
if [ ! -f "nginx/ssl/nginx.crt" ] || [ ! -f "nginx/ssl/nginx.key" ]; then
    missing_certs+=("nginx")
fi
if [ ! -f "nginx/ssl/backend/backend.crt" ] || [ ! -f "nginx/ssl/backend/backend.key" ]; then
    missing_certs+=("backend")
fi

if [ ${#missing_certs[@]} -ne 0 ]; then
    log_warning "Certificats SSL manquants: ${missing_certs[*]}"
    log_info "Ex√©cutez d'abord: ./scripts/setup.sh"
    read -p "Voulez-vous ex√©cuter la configuration maintenant? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        chmod +x scripts/setup.sh
        ./scripts/setup.sh
    else
        exit 1
    fi
fi

# Fichiers .env
missing_env=()
if [ ! -f "joots-frontend/.env" ]; then
    missing_env+=("frontend")
fi
if [ ! -f "joots-backend/.env" ]; then
    missing_env+=("backend")
fi

if [ ${#missing_env[@]} -ne 0 ]; then
    log_warning "Fichiers .env manquants: ${missing_env[*]}"
    log_info "Ex√©cutez d'abord: ./scripts/setup.sh"
    exit 1
fi

log_success "Configuration v√©rifi√©e"

# 3. Nettoyage des anciens containers
log_info "Nettoyage des anciens containers..."
docker compose $COMPOSE_FILES down -v 2>/dev/null || true

# 4. Construction et d√©marrage
log_info "Construction des images..."
docker compose $COMPOSE_FILES build --no-cache

log_info "D√©marrage des services..."
docker compose $COMPOSE_FILES up -d

# 5. Attendre que les services soient pr√™ts
log_info "Attente du d√©marrage des services..."
sleep 15


# 6. V√©rification de l'√©tat des services
log_info "V√©rification de l'√©tat des services..."

services=("postgres" "redis" "backend" "frontend" "nginx")
for service in "${services[@]}"; do
    if docker compose $COMPOSE_FILES ps | grep -q "$service.*Up"; then
        log_success "‚úÖ $service: D√©marr√©"
    else
        log_warning "‚ö†Ô∏è  $service: Probl√®me de d√©marrage"
    fi
done

# 7. Tests de connectivit√© HTTPS
log_info "Tests de connectivit√© HTTPS..."

# Test frontend via Nginx
if curl -k -s --max-time 10 https://localhost >/dev/null 2>&1; then
    log_success "‚úÖ Frontend HTTPS accessible"
else
    log_warning "‚ö†Ô∏è  Frontend HTTPS non accessible (peut √™tre normal au d√©marrage)"
fi

# Test API via Nginx
if curl -k -s --max-time 10 https://localhost/api/health >/dev/null 2>&1; then
    log_success "‚úÖ API HTTPS accessible"
else
    log_warning "‚ö†Ô∏è  API HTTPS non accessible (v√©rifiez si /health existe)"
fi

# 8. Affichage des logs pour diagnostic
echo ""
log_info "=== Logs des services (derni√®res lignes) ==="

echo ""
log_info "Backend (recherche SSL):"
docker compose $COMPOSE_FILES logs backend | grep -i "ssl\|https\|server.*running\|listening" | tail -3 || docker compose $COMPOSE_FILES logs backend | tail -3

echo ""
log_info "Frontend:"
docker compose $COMPOSE_FILES logs frontend | grep -i "ready\|started\|listening" | tail -3 || docker compose $COMPOSE_FILES logs frontend | tail -3

echo ""
log_info "Nginx:"
docker compose $COMPOSE_FILES logs nginx | tail -3

# 9. Instructions finales
echo ""
echo "üéâ JootsHub D√©marr√© avec Succ√®s!"
echo "================================"
echo ""
echo "üåê URLs d'acc√®s:"
echo "   ‚Ä¢ Frontend PWA: https://localhost"
echo "   ‚Ä¢ Backend API: https://localhost/api"
echo "   ‚Ä¢ Test PWA: https://localhost/fr/pwa-test (si disponible)"
echo ""
echo "üîê Certificats SSL:"
echo "   ‚Ä¢ Acceptez les certificats auto-sign√©s dans votre navigateur"
echo "   ‚Ä¢ Chrome: Tapez 'thisisunsafe' sur la page d'erreur SSL"
echo "   ‚Ä¢ Firefox: Cliquez 'Avanc√©' > 'Accepter le risque'"
echo ""
echo "üìã Commandes utiles:"
echo "   ‚Ä¢ Voir les logs: docker compose $COMPOSE_FILES logs -f [service]"
echo "   ‚Ä¢ Red√©marrer: docker compose $COMPOSE_FILES restart [service]"
echo "   ‚Ä¢ Arr√™ter: docker compose $COMPOSE_FILES down"
echo "   ‚Ä¢ Voir l'√©tat: docker compose $COMPOSE_FILES ps"
echo ""
echo "üîç En cas de probl√®me:"
echo "   ‚Ä¢ V√©rifiez les logs: docker compose $COMPOSE_FILES logs [service]"
echo "   ‚Ä¢ Red√©marrez un service: docker compose $COMPOSE_FILES restart [service]"
echo "   ‚Ä¢ Configuration compl√®te: ./scripts/setup.sh"
echo ""

# Proposer de suivre les logs
read -p "Voulez-vous suivre les logs en temps r√©el? [y/N] " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_info "Suivre les logs (Ctrl+C pour arr√™ter)..."
    docker compose $COMPOSE_FILES logs -f
fi

log_success "Application pr√™te! üöÄ" 